"""
üéØ UX-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
"""

import logging
from datetime import datetime, timedelta
from aiogram import types, F
from aiogram.enums import ContentType, ChatAction
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardMarkup

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
from bot.yclients import services, staff, free_slots, book_dates, create_record, format_date_russian
from bot.ux_keyboards import (
    smart_welcome_message, adaptive_main_menu, smart_balance_kb, 
    contextual_notification_kb, gamification_progress_kb, smart_booking_flow_kb,
    onboarding_kb, personalized_support_kb, get_motivational_tip,
    get_user_profile
)
from bot.db import register_mapping, user_contact, get_agent_id, get_balance, change_balance, conn
from bot.config import REDEEM_CAP
from bot.moysklad import find_agent_by_phone, fetch_shipments, fetch_demand_full, apply_discount
from bot.formatting import fmt_money, fmt_date_local, render_positions
from bot.accrual import doc_age_seconds, accrue_for_demand
from bot.loyalty import get_redeem_cap, format_level_status, format_level_benefits, get_level_info, calculate_level_by_spent
from bot.analytics import (
    get_client_statistics, get_client_ranking, get_bonus_history,
    format_client_statistics, format_client_ranking, format_bonus_history
)
from bot.maintenance import (
    get_all_maintenance_status, format_maintenance_summary, format_maintenance_status,
    add_manual_maintenance, MAINTENANCE_WORKS
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
class UXStates(StatesGroup):
    wait_name = State()
    onboarding_car_info = State()
    smart_booking_service = State()
    smart_booking_master = State()
    smart_booking_time = State()
    redeem_amount = State()

def register_ux_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö UX-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üöÄ –£–ú–ù–´–ô –°–¢–ê–†–¢ –ò –û–ù–ë–û–†–î–ò–ù–ì
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    @dp.message(CommandStart())
    async def ux_cmd_start(m: types.Message):
        """üéØ UX-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        user_name = m.from_user.first_name or "–¥—Ä—É–≥"
        
        if agent_id:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            message, keyboard = smart_welcome_message(user_name, m.from_user.id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç
            tip = get_motivational_tip(m.from_user.id)
            message += f"\n\nüí° {tip}"
            
            return await m.answer(message, reply_markup=keyboard)
        
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        kb = ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        
        await m.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!\n\n"
            "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üí∞ –ü–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ\n"
            "‚Ä¢ üìÖ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ üîß –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¢–û –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
            "‚Ä¢ üéÅ –≠–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ 40% —Å –ø–æ–º–æ—â—å—é –±–æ–Ω—É—Å–æ–≤\n\n"
            "üëÜ –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=kb
        )

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üì± –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –° –£–õ–£–ß–®–ï–ù–ù–´–ú UX
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    @dp.message(F.content_type == ContentType.CONTACT)
    async def ux_contact_auth(m: types.Message, state: FSMContext):
        """üì± UX-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        phone = m.contact.phone_number
        agent_id = find_agent_by_phone(phone)
        user_name = m.from_user.first_name or "–¥—Ä—É–≥"

        if agent_id:
            # ‚ïê‚ïê‚ïê –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç ‚ïê‚ïê‚ïê
            register_mapping(
                tg_id=m.from_user.id,
                agent_id=agent_id,
                phone=phone,
                fullname=m.contact.first_name or ""
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            last = fetch_shipments(agent_id, limit=1)
            welcome_bonus_msg = ""
            
            if last:
                did = last[0]["id"]
                already = conn.execute(
                    "SELECT 1 FROM accrual_log WHERE demand_id=?", (did,)
                ).fetchone()
                
                if not already:
                    full = fetch_demand_full(did)
                    if doc_age_seconds(full["moment"]) >= 300:
                        added = accrue_for_demand(full)
                        if added:
                            conn.execute(
                                "INSERT INTO accrual_log(demand_id) VALUES(?)", (did,)
                            )
                            conn.commit()
                            welcome_bonus_msg = f"\n\nüéâ –ù–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {fmt_money(added)}"

            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –≤–µ—Ä–Ω—É–≤—à–µ–≥–æ—Å—è –∫–ª–∏–µ–Ω—Ç–∞
            profile = get_user_profile(m.from_user.id)
            message = (
                f"‚úÖ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}!\n\n"
                f"üéØ –í–∞—à —Å—Ç–∞—Ç—É—Å: {profile['loyalty_level']}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {fmt_money(profile['balance'])}{welcome_bonus_msg}\n\n"
                f"üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await m.answer(message, reply_markup=adaptive_main_menu(m.from_user.id))
            return

        # ‚ïê‚ïê‚ïê –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û ‚ïê‚ïê‚ïê
        await state.set_state(UXStates.wait_name)
        await state.update_data(phone=phone)
        
        await m.answer(
            "üÜï –í—ã –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!\n\n"
            "üë§ –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–§–ò–û)\n\n"
            "üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å"
        )

    @dp.message(UXStates.wait_name)
    async def ux_got_name(m: types.Message, state: FSMContext):
        """üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        data = await state.get_data()
        phone = data["phone"]
        name = m.text.strip()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥
        try:
            import requests
            from bot.moysklad import MS_BASE, HEADERS
            
            payload = {
                "name": name,
                "phone": phone,
                "phones": [{"phone": phone}]
            }
            
            resp = requests.post(
                f"{MS_BASE}/counterparty",
                headers=HEADERS,
                json=payload,
                timeout=10,
            )
            resp.raise_for_status()
            agent_id = resp.json()["id"]

        except Exception as e:
            await m.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                f"–û—à–∏–±–∫–∞: {e}\n\n"
                "üí¨ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∏
        register_mapping(m.from_user.id, agent_id, phone, name)
        await state.clear()

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–æ–≤
        await m.answer(
            "üéâ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
            "üí∞ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã: 100 ‚ÇΩ\n"
            "üéØ –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: Bronze\n\n"
            "‚ú® –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–Ω—É—Å—ã —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è!"
        )

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await m.answer(
            "üöÄ –•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?\n\n"
            "–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 30 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º:\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¢–û –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å—Ä–æ–∫–∞—Ö\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏",
            reply_markup=onboarding_kb(1)
        )

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üéØ CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ò–ù–¢–ï–†–§–ï–ô–°–ê
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.callback_query(F.data == "continue_chat")
    async def continue_in_chat(callback: types.CallbackQuery):
        """üí¨ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Ç–µ"""
        await callback.message.edit_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n\n"
            "üí° –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await callback.message.answer(
            "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            reply_markup=adaptive_main_menu(callback.from_user.id)
        )

    @dp.callback_query(F.data == "onboarding_start")
    async def start_onboarding(callback: types.CallbackQuery):
        """üöÄ –ù–∞—á–∞–ª–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        user_name = callback.from_user.first_name or "–¥—Ä—É–≥"
        
        await callback.message.edit_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏! "
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å",
            reply_markup=onboarding_kb(1)
        )

    @dp.callback_query(F.data == "onboarding_step_2")
    async def onboarding_step_2(callback: types.CallbackQuery):
        """üöó –í—Ç–æ—Ä–æ–π —à–∞–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        await callback.message.edit_text(
            "üöó –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º:\n"
            "‚Ä¢ üîß –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –¢–û\n"
            "‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Å–µ—Ä–≤–∏—Å–µ\n"
            "‚Ä¢ üí° –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª—É–≥–∏\n"
            "‚Ä¢ üí∞ –î–µ–ª–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            reply_markup=onboarding_kb(2)
        )

    @dp.callback_query(F.data == "onboarding_step_3")
    async def onboarding_step_3(callback: types.CallbackQuery):
        """üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        await callback.message.edit_text(
            "üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ!\n\n"
            "üí∞ –í–∞—à –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: 100 ‚ÇΩ\n\n"
            "üéØ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–º?",
            reply_markup=onboarding_kb(3)
        )

    @dp.callback_query(F.data == "onboarding_skip")
    async def skip_onboarding(callback: types.CallbackQuery):
        """‚è≠ –ü—Ä–æ–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        await callback.message.edit_text(
            "‚úÖ –ü–æ–Ω—è—Ç–Ω–æ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∑–∂–µ.\n\n"
            "üí° –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Ñ–∏–ª—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
        )
        
        await callback.message.answer(
            "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=adaptive_main_menu(callback.from_user.id)
        )

    @dp.callback_query(F.data == "to_main_menu")
    async def to_main_menu(callback: types.CallbackQuery):
        """üè† –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.message.delete()
        
        await callback.message.answer(
            "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=adaptive_main_menu(callback.from_user.id)
        )

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üí∞ UX-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –†–ê–ë–û–¢–ê –° –ë–ê–õ–ê–ù–°–û–ú
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.in_(["üíé –ë–∞–ª–∞–Ω—Å", "üî• –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º"]))
    async def ux_show_balance(m: types.Message):
        """üí∞ –£–º–Ω—ã–π –ø–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

        profile = get_user_profile(m.from_user.id)
        balance = profile["balance"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        total_spent = 25000  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã
        level_id = calculate_level_by_spent(total_spent)
        level_info = get_level_info(level_id)
        level_info['level'] = level_info['name']  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        if balance == 0:
            message = (
                "üí≥ –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {fmt_money(balance)}\n"
                f"üéØ –°—Ç–∞—Ç—É—Å: {level_info['level']}\n\n"
                "üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–µ –±–æ–Ω—É—Å—ã:\n"
                "‚Ä¢ üìÖ –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¢–û (+–∫—ç—à–±–µ–∫)\n"
                "‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ (+500 ‚ÇΩ)\n"
                "‚Ä¢ üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ—Å–µ—â–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å\n\n"
                f"üìä {format_level_status(level_info)}"
            )
        elif balance < 500:
            message = (
                "üí≥ –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {fmt_money(balance)}\n"
                f"üéØ –°—Ç–∞—Ç—É—Å: {level_info['level']}\n\n"
                "üöÄ –ù–∞–∫–æ–ø–∏—Ç–µ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –∏ —Å–º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ üéÅ –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –º–æ–π–∫—É\n"
                "‚Ä¢ üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–∞—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û\n\n"
                f"üìä {format_level_status(level_info)}"
            )
        else:
            # –†–∞—Å—á–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏
            max_redeem = min(balance, int(balance * 0.3))  # –ú–∞–∫—Å–∏–º—É–º 30% –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            
            message = (
                "üí≥ –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {fmt_money(balance)}\n"
                f"üéØ –°—Ç–∞—Ç—É—Å: {level_info['level']}\n\n"
                "üéÅ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å:\n"
                f"‚Ä¢ –ù–∞ –¢–û: –¥–æ {fmt_money(max_redeem)}\n"
                f"‚Ä¢ –ù–∞ –∑–∞–ø—á–∞—Å—Ç–∏: –¥–æ {fmt_money(max_redeem)}\n"
                f"‚Ä¢ –ù–∞ –º–æ–π–∫—É: {fmt_money(min(balance, 500))}\n\n"
                f"üìä {format_level_status(level_info)}"
            )

        await m.answer(message, reply_markup=smart_balance_kb(m.from_user.id))

    @dp.callback_query(F.data == "spending_recommendations")
    async def spending_recommendations(callback: types.CallbackQuery):
        """üí° –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–∞—Ç–∞–º"""
        agent_id = get_agent_id(callback.from_user.id)
        if not agent_id:
            return
        
        balance = get_balance(agent_id)
        profile = get_user_profile(callback.from_user.id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        
        if balance >= 1000:
            recommendations.append("üîß –°–ª–µ–¥—É—é—â–µ–µ –¢–û - —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 30%")
        if balance >= 500:
            recommendations.append("üõí –ó–∞–ø—á–∞—Å—Ç–∏ - —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 25%")
        if balance >= 200:
            recommendations.append("üßº –ú–æ–π–∫–∞ - –ø–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞–º–∏")
        if balance >= 100:
            recommendations.append("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - —á–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞")
            
        message = (
            f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {fmt_money(balance)}\n\n"
            + "\n".join(f"‚Ä¢ {rec}" for rec in recommendations) +
            "\n\nüí¨ –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á—Ç–æ-—Ç–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ?"
        )
        
        await callback.message.edit_text(message)

    @dp.callback_query(F.data == "earning_tips")
    async def earning_tips(callback: types.CallbackQuery):
        """üí° –°–æ–≤–µ—Ç—ã –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –±–æ–Ω—É—Å–æ–≤"""
        profile = get_user_profile(callback.from_user.id)
        
        if profile["level"] == "new":
            tips = [
                "üìÖ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç - –ø–æ–ª—É—á–∞–π—Ç–µ –¥–≤–æ–π–Ω—ã–µ –±–æ–Ω—É—Å—ã",
                "üîÑ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –∫—ç—à–±–µ–∫",
                "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π - –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 500‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ"
            ]
        else:
            tips = [
                "üéØ –ü–æ–¥–Ω–∏–º–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫—ç—à–±–µ–∫–∞",
                "üìà –£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —á–µ–∫ - –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤",
                "‚≠ê –û—Å—Ç–∞–≤–ª—è–π—Ç–µ –æ—Ç–∑—ã–≤—ã - –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã"
            ]
        
        message = (
            "üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤:\n\n" +
            "\n".join(f"‚Ä¢ {tip}" for tip in tips) +
            "\n\nüöÄ –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
        )
        
        await callback.message.edit_text(message)

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üìÖ –£–ú–ù–ê–Ø –ó–ê–ü–ò–°–¨ –ù–ê –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.in_(["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û", "üìÖ VIP-–∑–∞–ø–∏—Å—å"]))
    async def ux_smart_booking_start(m: types.Message, state: FSMContext):
        """üìÖ –£–º–Ω–æ–µ –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –∏–∑ –¢–û –¥–∞–Ω–Ω—ã—Ö)
        await m.answer("üîç –ü–æ–¥–±–∏—Ä–∞–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –≤–∞—Å...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å–ª—É–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = get_user_profile(m.from_user.id)
        
        recommendations = []
        if profile["level"] == "new":
            recommendations = ["–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞"]
        else:
            recommendations = ["–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–º–æ–∑–æ–≤", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏"]
        
        message = (
            "üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ:\n\n"
            + "\n".join(f"‚úÖ {rec} (–ø–æ—Ä–∞!)" for rec in recommendations[:2]) +
            "\n" + "\n".join(f"‚ö†Ô∏è {rec} (—Å–∫–æ—Ä–æ)" for rec in recommendations[2:]) +
            "\n\nüìã –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥:"
        )
        
        context = {"recommended_services": recommendations}
        await state.update_data(context=context)
        await state.set_state(UXStates.smart_booking_service)
        
        await m.answer(
            message,
            reply_markup=smart_booking_flow_kb("service_selection", context)
        )

    @dp.callback_query(F.data == "quick_booking", UXStates.smart_booking_service)
    async def quick_booking_flow(callback: types.CallbackQuery):
        """‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å–ª—É–≥–∏"""
        await callback.message.edit_text(
            "‚ö° –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å–ª—É–≥–∏.\n\n"
            "üîç –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è —É –ª—É—á—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤..."
        )
        
        # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
        await callback.message.edit_text(
            "üìÖ –ù–∞–π–¥–µ–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:\n\n"
            "‚ö° –ó–∞–≤—Ç—Ä–∞, 14:00 - –ò–≤–∞–Ω –ú. (–≤–∞—à –º–∞—Å—Ç–µ—Ä) üåü\n"
            "‚Ä¢ –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, 10:00 - –ü–µ—Ç—Ä –°.\n"
            "‚Ä¢ –ü—è—Ç–Ω–∏—Ü–∞, 16:00 - –ò–≤–∞–Ω –ú. üåü\n\n"
            "üí° –ò–≤–∞–Ω –ú. –æ–±—Å–ª—É–∂–∏–≤–∞–ª –≤–∞—Å 3 —Ä–∞–∑–∞",
            reply_markup=smart_booking_flow_kb("time_selection", {"preferred_master": "–ò–≤–∞–Ω –ú."})
        )

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üéÅ –£–ú–ù–û–ï –°–ü–ò–°–ê–ù–ò–ï –ë–û–ù–£–°–û–í
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.contains("–°–ø–∏—Å–∞—Ç—å"))
    async def ux_smart_redeem(m: types.Message):
        """üéÅ –£–º–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π —ç–∫–æ–Ω–æ–º–∏–∏"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

        balance = get_balance(agent_id)
        
        if balance <= 0:
            return await m.answer(
                "üí≥ –ù–∞ –±–æ–Ω—É—Å–Ω–æ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
                "üí° –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–Ω—É—Å—ã:\n"
                "‚Ä¢ –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¢–û\n"
                "‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞\n"
                "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ—Å–µ—â–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å"
            )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        redeem_cap = get_redeem_cap(agent_id)
        max_redeem_pct = min(40, redeem_cap)  # –º–∞–∫—Å–∏–º—É–º 40%
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—É–º–º—ã —á–µ–∫–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        scenarios = [
            {"service": "–¢–û", "amount": 3500, "icon": "üîß"},
            {"service": "–ó–∞–ø—á–∞—Å—Ç–∏", "amount": 2500, "icon": "üõí"},
            {"service": "–ú–æ–π–∫–∞", "amount": 800, "icon": "üßº"},
        ]
        
        message = f"üí∞ –í–∞—à–∏ –±–æ–Ω—É—Å—ã: {fmt_money(balance)}\n\nüéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n"
        
        for scenario in scenarios:
            max_discount = int(scenario["amount"] * max_redeem_pct / 100)
            can_use = min(balance, max_discount)
            remaining = balance - can_use
            
            message += (
                f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
                f"‚îÇ {scenario['icon']} {scenario['service']:<20} ‚îÇ\n"
                f"‚îÇ –≠–∫–æ–Ω–æ–º–∏—è: {fmt_money(can_use):<12} ({max_redeem_pct}%) ‚îÇ\n"
                f"‚îÇ –û—Å—Ç–∞–Ω–µ—Ç—Å—è: {fmt_money(remaining):<11} ‚îÇ\n"
                f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        kb = InlineKeyboardBuilder()
        kb.row(
            types.InlineKeyboardButton(text="üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –¢–û", callback_data="redeem_to"),
            types.InlineKeyboardButton(text="üí≥ –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="redeem_other")
        )
        
        await m.answer(message, reply_markup=kb.as_markup())

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üí¨ –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.in_(["üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]))
    async def ux_personalized_support(m: types.Message):
        """üí¨ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
        profile = get_user_profile(m.from_user.id)
        
        if profile["level"] == "new":
            message = (
                "üí¨ –¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è:\n"
                "‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤\n"
                "‚Ä¢ –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç–∏–º –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"
            )
        elif profile["level"] == "vip":
            message = (
                "üí¨ VIP –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                f"üëë –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –¥–µ–ª–∞ —Å –≤–∞—à–∏–º {profile['loyalty_level']} —Å—Ç–∞—Ç—É—Å–æ–º?\n\n"
                "üåü –î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n"
                "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                "‚Ä¢ –ü—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n"
                "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
                "‚ùì –ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å?"
            )
        else:
            message = (
                "üí¨ –¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
                "üòä –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!\n\n"
                "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ç–µ–º—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:"
            )
        
        await m.answer(message, reply_markup=personalized_support_kb(m.from_user.id))

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üìä –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–Ø –ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.in_(["üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"]))
    async def ux_gamification_stats(m: types.Message):
        """üìä –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

        profile = get_user_profile(m.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        total_spent = 25000  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        level_id = calculate_level_by_spent(total_spent)
        level_info = get_level_info(level_id)
        level_info['level'] = level_info['name']
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
        progress = profile.get("loyalty_progress", 0)
        
        message = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üéØ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {level_info['level']}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {fmt_money(profile['balance'])}\n"
            f"üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏–π: {profile['visits']}\n\n"
            f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:\n"
            f"{'‚ñì' * int(progress * 10)}{'‚ñë' * (10 - int(progress * 10))} {progress:.0%}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if progress > 0.8:
            message += "üî• –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä—ã–≤–æ–∫! –°–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è!\n\n"
        elif progress > 0.5:
            message += "üöÄ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n\n"
        else:
            message += "üí™ –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! –í–ø–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!\n\n"
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
        achievements = []
        if profile["visits"] >= 1:
            achievements.append("üèÜ –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç")
        if profile["visits"] >= 5:
            achievements.append("üåü –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
        if profile["balance"] >= 1000:
            achievements.append("üíé –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å")
        
        if achievements:
            message += f"üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(f"‚Ä¢ {ach}" for ach in achievements)
        
        await m.answer(
            message, 
            reply_markup=gamification_progress_kb(level_info['level'], progress)
        )

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üîß –û–°–¢–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.in_(["üîß –¢–û", "üõ† –¢–û —Å—Ç–∞—Ç—É—Å"]))
    async def ux_maintenance_status(m: types.Message):
        """üîß –°—Ç–∞—Ç—É—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        status = get_all_maintenance_status(agent_id)
        summary = format_maintenance_summary(status)
        
        message = (
            "üîß –°—Ç–∞—Ç—É—Å –¢–û –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n"
            f"{summary}\n\n"
            "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        )
        
        await m.answer(message)

    @dp.message(F.text.in_(["üë§ –ü—Ä–æ—Ñ–∏–ª—å"]))
    async def ux_user_profile(m: types.Message):
        """üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        
        profile = get_user_profile(m.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        total_spent = 25000  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        level_id = calculate_level_by_spent(total_spent)
        level_info = get_level_info(level_id)
        level_info['level'] = level_info['name']
        
        message = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"üéØ –°—Ç–∞—Ç—É—Å: {level_info['level']}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {fmt_money(profile['balance'])}\n"
            f"üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏–π: {profile['visits']}\n"
            f"üì± Telegram: @{m.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üìä {format_level_status(level_id, total_spent)}"
        )
        
        from bot.keyboards import profile_menu_kb
        await m.answer(message, reply_markup=profile_menu_kb())

    @dp.message(F.text.in_(["üìä –ò—Å—Ç–æ—Ä–∏—è", "üìä –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è"]))
    async def ux_visit_history(m: types.Message):
        """üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π"""
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
        shipments = fetch_shipments(agent_id, limit=10)
        
        if not shipments:
            return await m.answer(
                "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π\n\n"
                "ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö.\n\n"
                "üí° –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫ –∏ —É—Å–ª—É–≥."
            )
        
        message = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è:\n\n"
        
        for i, shipment in enumerate(shipments[:5], 1):
            date_str = fmt_date_local(shipment["moment"])
            amount = shipment.get("sum", 0) / 100  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
            message += f"{i}. {date_str} ‚Ä¢ {fmt_money(amount)}\n"
        
        if len(shipments) > 5:
            message += f"\n... –∏ –µ—â–µ {len(shipments) - 5} –ø–æ—Å–µ—â–µ–Ω–∏–π"
        
        from bot.handlers import list_visits_kb
        await m.answer(message, reply_markup=list_visits_kb(shipments))

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üí° –ü–û–ú–û–©–¨ –ò –û–ë–£–ß–ï–ù–ò–ï
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.in_(["üí° –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–æ–Ω—É—Å—ã?"]))
    async def ux_bonus_help(m: types.Message):
        """üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤"""
        profile = get_user_profile(m.from_user.id)
        
        message = (
            "üí° –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤\n\n"
            "üí∞ –ó–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∫—ç—à–±–µ–∫:\n"
            "‚Ä¢ ü•â Bronze: 3% –æ—Ç —Å—É–º–º—ã —á–µ–∫–∞\n"
            "‚Ä¢ ü•à Silver: 4% –æ—Ç —Å—É–º–º—ã —á–µ–∫–∞\n"
            "‚Ä¢ ü•á Gold: 5% –æ—Ç —Å—É–º–º—ã —á–µ–∫–∞\n"
            "‚Ä¢ üíé Platinum: 6% –æ—Ç —Å—É–º–º—ã —á–µ–∫–∞\n"
            "‚Ä¢ üëë VIP: 7% –æ—Ç —Å—É–º–º—ã —á–µ–∫–∞\n\n"
            "üéÅ –¢—Ä–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ:\n"
            f"‚Ä¢ –î–æ {profile.get('loyalty_level', 'Bronze')} —É—Ä–æ–≤–Ω—è: –¥–æ 30% –æ—Ç —á–µ–∫–∞\n"
            "‚Ä¢ –ù–∞ –ª—é–±—ã–µ —É—Å–ª—É–≥–∏ –∏ –∑–∞–ø—á–∞—Å—Ç–∏\n"
            "‚Ä¢ –í –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n"
            "üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π —Å—É–º–º—ã"
        )
        
        await m.answer(message)
