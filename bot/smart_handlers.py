"""
üß† –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —É–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
"""

import logging
from datetime import datetime, timedelta
from aiogram import types, F
from aiogram.enums import ContentType, ChatAction
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardMarkup, InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
from bot.yclients import services, staff, free_slots, book_dates, create_record, format_date_russian
from bot.ux_keyboards import (
    smart_welcome_message, adaptive_main_menu, smart_balance_kb, 
    contextual_notification_kb, gamification_progress_kb, smart_booking_flow_kb,
    onboarding_kb, personalized_support_kb, get_motivational_tip,
    get_user_profile
)
from bot.db import register_mapping, user_contact, get_agent_id, get_balance, change_balance, conn
from bot.config import REDEEM_CAP
from bot.moysklad import find_agent_by_phone, fetch_shipments, fetch_demand_full, apply_discount
from bot.formatting import fmt_money, fmt_date_local, render_positions
from bot.accrual import doc_age_seconds, accrue_for_demand
from bot.loyalty import get_redeem_cap, format_level_status, format_level_benefits, get_level_info, calculate_level_by_spent
from bot.analytics import (
    get_client_statistics, get_client_ranking, get_bonus_history,
    format_client_statistics, format_client_ranking, format_bonus_history
)
from bot.maintenance import (
    get_all_maintenance_status, format_maintenance_summary, format_maintenance_status,
    add_manual_maintenance, MAINTENANCE_WORKS
)

# –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
from ux_copy_texts import (
    WelcomeTexts, BalanceTexts, BookingTexts, RedeemTexts,
    AnalyticsTexts, MaintenanceTexts, SupportTexts, ErrorTexts,
    GamificationTexts, TextHelpers, EmotionalTone, DynamicTexts
)

# –ò–º–ø–æ—Ä—Ç —É–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from bot.smart_features import (
    PersonalAssistant, AchievementSystem, SmartNotificationSystem,
    RecommendationEngine, SmartAnalytics
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
personal_assistant = PersonalAssistant()
achievement_system = AchievementSystem()
recommendation_engine = RecommendationEngine()
smart_analytics = SmartAnalytics()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
class SmartStates(StatesGroup):
    wait_name = State()
    onboarding_car_info = State()
    smart_booking_service = State()
    smart_booking_master = State()
    smart_booking_time = State()
    redeem_amount = State()

def register_smart_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —É–º–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üöÄ –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –° –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ú –ü–û–ú–û–©–ù–ò–ö–û–ú
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    @dp.message(CommandStart())
    async def smart_start(m: types.Message):
        """üéØ –ö–æ–º–∞–Ω–¥–∞ /start —Å —É–º–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        user_name = m.from_user.first_name or "–¥—Ä—É–≥"
        
        if agent_id:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
            profile = get_user_profile(m.from_user.id)
            time_greeting = TextHelpers.get_time_greeting()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            insights = await personal_assistant.get_smart_insights(m.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new_achievements = await achievement_system.check_achievements(m.from_user.id)
            
            message = WelcomeTexts.returning_user(
                name=user_name,
                status=profile['loyalty_level'],
                balance=profile['balance'],
                time_greeting=time_greeting
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if insights:
                top_insight = insights[0]
                message += f"\n\n{top_insight.emoji} {top_insight.title}\n{top_insight.message}"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
            if new_achievements:
                achievement = new_achievements[0]
                message += f"\n\nüéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement.title}!\nüí∞ +{achievement.reward} –±–æ–Ω—É—Å–æ–≤"
                # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
                change_balance(agent_id, achievement.reward)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç
            tip = get_motivational_tip(m.from_user.id)
            message += f"\n\nüí° {tip}"
            
            return await m.answer(message, reply_markup=adaptive_main_menu(m.from_user.id))
        
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        kb = ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        
        await m.answer(
            WelcomeTexts.new_user_greeting(),
            reply_markup=kb
        )

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üì± –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –° –£–ú–ù–´–ú–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    @dp.message(F.content_type == ContentType.CONTACT)
    async def smart_contact_auth(m: types.Message, state: FSMContext):
        """üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        phone = m.contact.phone_number
        agent_id = find_agent_by_phone(phone)
        user_name = m.from_user.first_name or "–¥—Ä—É–≥"

        if agent_id:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
            register_mapping(
                tg_id=m.from_user.id,
                agent_id=agent_id,
                phone=phone,
                fullname=m.contact.first_name or ""
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ
            last = fetch_shipments(agent_id, limit=1)
            welcome_bonus_msg = ""
            
            if last:
                did = last[0]["id"]
                already = conn.execute(
                    "SELECT 1 FROM accrual_log WHERE demand_id=?", (did,)
                ).fetchone()
                
                if not already:
                    full = fetch_demand_full(did)
                    if doc_age_seconds(full["moment"]) >= 300:
                        added = accrue_for_demand(full)
                        if added:
                            conn.execute(
                                "INSERT INTO accrual_log(demand_id) VALUES(?)", (did,)
                            )
                            conn.commit()
                            welcome_bonus_msg = f"\n\nüéâ –ù–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {fmt_money(added)}"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            profile = get_user_profile(m.from_user.id)
            time_greeting = TextHelpers.get_time_greeting()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            insights = await personal_assistant.get_smart_insights(m.from_user.id)
            
            message = WelcomeTexts.returning_user(
                name=user_name,
                status=profile['loyalty_level'],
                balance=profile['balance'],
                time_greeting=time_greeting
            )
            message += welcome_bonus_msg
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            if insights:
                top_insight = insights[0]
                message += f"\n\n{top_insight.emoji} {top_insight.title}\n{top_insight.message}"
            
            await m.answer(message, reply_markup=adaptive_main_menu(m.from_user.id))
            return

        # –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        await state.set_state(SmartStates.wait_name)
        await state.update_data(phone=phone)
        
        await m.answer(WelcomeTexts.new_client_name_request())

    @dp.message(SmartStates.wait_name)
    async def smart_got_name(m: types.Message, state: FSMContext):
        """üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å —É–º–Ω—ã–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        data = await state.get_data()
        phone = data["phone"]
        name = m.text.strip()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥
        try:
            import requests
            from bot.moysklad import MS_BASE, HEADERS
            
            payload = {
                "name": name,
                "phone": phone,
                "phones": [{"phone": phone}]
            }
            
            resp = requests.post(
                f"{MS_BASE}/counterparty",
                headers=HEADERS,
                json=payload,
                timeout=10,
            )
            resp.raise_for_status()
            agent_id = resp.json()["id"]

        except Exception as e:
            await m.answer(
                ErrorTexts.general_error() + 
                f"\n\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e}\n\n" +
                "üí¨ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –º—ã –±—ã—Å—Ç—Ä–æ –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏–º!"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∏
        register_mapping(m.from_user.id, agent_id, phone, name)
        await state.clear()

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        await m.answer(WelcomeTexts.profile_created())

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–º–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await m.answer(
            WelcomeTexts.onboarding_offer(),
            reply_markup=onboarding_kb(1)
        )

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üí∞ –ë–ê–õ–ê–ù–° –° –£–ú–ù–´–ú–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø–ú–ò
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.in_(["üíé –ë–∞–ª–∞–Ω—Å", "üî• –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º"]))
    async def smart_show_balance(m: types.Message):
        """üí∞ –ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer(ErrorTexts.auth_required())

        profile = get_user_profile(m.from_user.id)
        balance = profile["balance"]
        status = profile["loyalty_level"]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = await recommendation_engine.get_personalized_recommendations(m.from_user.id)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        if balance == 0:
            message = BalanceTexts.empty_balance(status)
        elif balance < 500:
            message = BalanceTexts.small_balance(balance, status)
        else:
            max_redeem = min(balance, int(balance * 0.3))
            message = BalanceTexts.good_balance(balance, status, max_redeem)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if recommendations:
            financial_recs = [r for r in recommendations if r['type'] == 'financial']
            if financial_recs:
                rec = financial_recs[0]
                message += f"\n\nüí° {rec['title']}\n{rec['description']}"

        await m.answer(message, reply_markup=smart_balance_kb(m.from_user.id))

    @dp.callback_query(F.data == "smart_insights")
    async def show_smart_insights(callback: types.CallbackQuery):
        """üß† –ü–æ–∫–∞–∑ —É–º–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤"""
        insights = await personal_assistant.get_smart_insights(callback.from_user.id)
        
        if not insights:
            await callback.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return
        
        message = "üß† –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
        
        for i, insight in enumerate(insights, 1):
            message += f"{i}. {insight.emoji} {insight.title}\n"
            message += f"   {insight.message}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        kb = InlineKeyboardBuilder()
        for insight in insights[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            kb.row(types.InlineKeyboardButton(
                text=insight.action_text, 
                callback_data=insight.action_data
            ))
        
        await callback.message.edit_text(message, reply_markup=kb.as_markup())

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üìÖ –£–ú–ù–ê–Ø –ó–ê–ü–ò–°–¨ –° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø–ú–ò
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.in_(["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û", "üìÖ VIP-–∑–∞–ø–∏—Å—å"]))
    async def smart_booking_start(m: types.Message, state: FSMContext):
        """üìÖ –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Å —É–º–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer(ErrorTexts.auth_required())

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
        await m.answer(BookingTexts.booking_start())
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å–ª—É–≥–∞–º
        recommendations = await recommendation_engine.get_personalized_recommendations(m.from_user.id)
        service_recs = [r for r in recommendations if r['type'] == 'service']
        
        profile = get_user_profile(m.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if service_recs:
            recommended_services = [r['title'].replace('üîß ', '').replace('üßº ', '') for r in service_recs]
        elif profile["level"] == "new":
            recommended_services = ["–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞"]
        else:
            recommended_services = ["–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–º–æ–∑–æ–≤", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏"]
        
        message = BookingTexts.service_recommendations(recommended_services)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        behavior = await smart_analytics.analyze_user_behavior(m.from_user.id)
        time_prefs = behavior.get('preferred_time', {})
        
        if time_prefs.get('confidence', 0) > 0.7:
            preferred_hour = time_prefs.get('preferred_hour', 14)
            message += f"\n\n‚è∞ –í–∞—à–µ –æ–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è: {preferred_hour}:00"
        
        context = {
            "recommended_services": recommended_services,
            "preferred_time": time_prefs
        }
        await state.update_data(context=context)
        await state.set_state(SmartStates.smart_booking_service)
        
        await m.answer(
            message,
            reply_markup=smart_booking_flow_kb("service_selection", context)
        )

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üìä –£–ú–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.in_(["üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"]))
    async def smart_user_stats(m: types.Message):
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —É–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer(ErrorTexts.auth_required())

        profile = get_user_profile(m.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        new_achievements = await achievement_system.check_achievements(m.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–≤–µ–¥–µ–Ω–∏—è
        behavior = await smart_analytics.analyze_user_behavior(m.from_user.id)
        
        message = AnalyticsTexts.user_stats(
            status=profile['loyalty_level'],
            balance=profile['balance'],
            visits=profile['visits'],
            progress=profile['loyalty_progress']
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º insights –æ—Ç —É–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        engagement = behavior.get('engagement_level', 0)
        if engagement > 0.8:
            message += f"\n\nüî• –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –í—ã—Å–æ–∫–∏–π ({engagement:.0%})"
        elif engagement > 0.5:
            message += f"\n\nüìà –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –°—Ä–µ–¥–Ω–∏–π ({engagement:.0%})"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if new_achievements:
            message += "\n\nüéâ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
            for achievement in new_achievements:
                message += f"üèÜ {achievement.title} (+{achievement.reward}‚ÇΩ)\n"
                # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
                change_balance(agent_id, achievement.reward)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        unlocked_achievements = achievement_system._get_user_achievements(m.from_user.id)
        all_achievements = list(achievement_system.achievements.values())
        
        unlocked_count = len(unlocked_achievements)
        total_count = len(all_achievements)
        
        if unlocked_count > 0:
            message += f"\n\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {unlocked_count}/{total_count}"
            
        await m.answer(
            message, 
            reply_markup=gamification_progress_kb(profile['loyalty_level'], profile['loyalty_progress'])
        )

    @dp.callback_query(F.data == "show_achievements")
    async def show_detailed_achievements(callback: types.CallbackQuery):
        """üèÜ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        unlocked = achievement_system._get_user_achievements(callback.from_user.id)
        all_achievements = achievement_system.achievements
        
        message = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
        
        unlocked_rewards = 0
        for achievement_id, achievement in all_achievements.items():
            if achievement_id in unlocked:
                message += f"‚úÖ {achievement.icon} {achievement.title}\n"
                message += f"    {achievement.description}\n"
                message += f"    üí∞ +{achievement.reward}‚ÇΩ\n\n"
                unlocked_rewards += achievement.reward
            else:
                message += f"üîí {achievement.icon} {achievement.title}\n"
                message += f"    {achievement.description}\n"
                message += f"    üí∞ {achievement.reward}‚ÇΩ\n\n"
        
        message += f"üíé –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {unlocked_rewards}‚ÇΩ"
        
        await callback.message.edit_text(message)

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üîß –£–ú–ù–û–ï –¢–ï–•–û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.in_(["üîß –¢–û", "üõ† –¢–û —Å—Ç–∞—Ç—É—Å"]))
    async def smart_maintenance_status(m: types.Message):
        """üîß –°—Ç–∞—Ç—É—Å –¢–û —Å —É–º–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer(ErrorTexts.auth_required())

        status = get_all_maintenance_status(agent_id)
        summary = format_maintenance_summary(status)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é
        insights = await personal_assistant.get_smart_insights(m.from_user.id)
        maintenance_insights = [i for i in insights if i.type == 'maintenance']
        
        message = (
            MaintenanceTexts.maintenance_overview() + 
            f"\n\n{summary}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if maintenance_insights:
            insight = maintenance_insights[0]
            message += f"üí° {insight.title}\n{insight.message}\n\n"
        
        message += "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
        
        await m.answer(message)

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üí¨ –£–ú–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message(F.text.in_(["üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]))
    async def smart_support(m: types.Message):
        """üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = get_user_profile(m.from_user.id)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        behavior = await smart_analytics.analyze_user_behavior(m.from_user.id)
        
        message = SupportTexts.support_menu(profile["level"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        engagement = behavior.get('engagement_level', 0)
        if engagement < 0.3:
            message += "\n\nüí° –í–∏–¥–∏–º, —á—Ç–æ –≤—ã –Ω–æ–≤–∏—á–æ–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å —Ä–∞–∑–¥–µ–ª '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–æ–Ω—É—Å—ã?'"
        elif engagement > 0.8:
            message += "\n\nüåü –ö–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!"
        
        await m.answer(message, reply_markup=personalized_support_kb(m.from_user.id))

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üéÆ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.callback_query(F.data == "get_referral_link")
    async def get_referral_link(callback: types.CallbackQuery):
        """üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
        referral_link = f"https://t.me/YourBotName?start=ref_{callback.from_user.id}"
        
        message = (
            "üë• –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
            f"`{referral_link}`\n\n"
            "üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ 500‚ÇΩ –±–æ–Ω—É—Å–æ–≤!\n\n"
            "üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º"
        )
        
        await callback.message.edit_text(message, parse_mode='Markdown')

    @dp.callback_query(F.data == "show_savings_calculator")
    async def show_savings_calculator(callback: types.CallbackQuery):
        """üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∏"""
        profile = get_user_profile(callback.from_user.id)
        balance = profile['balance']
        
        scenarios = [
            {"service": "–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞", "cost": 3500, "discount": 30},
            {"service": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "cost": 2000, "discount": 40},
            {"service": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –¢–û", "cost": 8000, "discount": 25},
        ]
        
        message = f"üí∞ –í–∞—à–∏ {balance:,}‚ÇΩ –±–æ–Ω—É—Å–æ–≤ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å:\n\n"
        
        for scenario in scenarios:
            max_discount = min(balance, int(scenario['cost'] * scenario['discount'] / 100))
            final_cost = scenario['cost'] - max_discount
            message += f"üîß {scenario['service']}\n"
            message += f"   –¶–µ–Ω–∞: {scenario['cost']:,}‚ÇΩ\n"
            message += f"   –°–∫–∏–¥–∫–∞: {max_discount:,}‚ÇΩ ({scenario['discount']}%)\n"
            message += f"   –ö –¥–æ–ø–ª–∞—Ç–µ: {final_cost:,}‚ÇΩ\n\n"
        
        await callback.message.edit_text(message)

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # ‚ö†Ô∏è –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @dp.message()
    async def handle_unknown_message(m: types.Message):
        """ü§∑‚Äç‚ôÇÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–º–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = get_user_profile(m.from_user.id) if get_agent_id(m.from_user.id) else None
        
        if profile:
            # –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            insights = await personal_assistant.get_smart_insights(m.from_user.id)
            
            message = (
                "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏\n\n"
                "üí° –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é ‚Äî —Ç–∞–∫ –ø—Ä–æ—â–µ!\n\n"
            )
            
            if insights:
                message += f"üéØ –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: {insights[0].title}?\n\n"
                
            message += "üÜò –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'"
        else:
            # –î–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏\n\n"
                "üí° –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é ‚Äî —Ç–∞–∫ –ø—Ä–æ—â–µ!\n\n"
                "üÜò –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'"
            )
        
        await m.answer(message)

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
__all__ = ['register_smart_handlers']
