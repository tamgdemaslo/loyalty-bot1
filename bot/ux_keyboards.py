"""
üé® UX-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
–°–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
"""

from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import types
from .formatting import fmt_date_local, fmt_money
from .loyalty import get_level_info, calculate_level_by_spent, get_redeem_cap
from .db import get_balance, get_agent_id
from .config import MINIAPP_URL
from datetime import datetime
import random

def get_user_profile(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
    agent_id = get_agent_id(user_id)
    if not agent_id:
        return {"level": "new", "balance": 0, "visits": 0, "loyalty_level": "–ù–æ–≤–∏—á–æ–∫", "loyalty_progress": 0}
    
    balance = get_balance(agent_id)
    
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –±–∞–∑—ã
    total_spent = 25000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç
    level_id = calculate_level_by_spent(total_spent)
    level_info = get_level_info(level_id)
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—ã—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    visits = 5  # TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –±–∞–∑—ã
    
    if level_info["name"] in ["–ù–æ–≤–∏—á–æ–∫"] and visits < 3:
        profile_type = "new"
    elif level_info["name"] in ["–°–µ—Ä–µ–±—Ä–æ", "–ó–æ–ª–æ—Ç–æ"]:
        profile_type = "experienced"
    else:
        profile_type = "vip"
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
    next_level_id = level_id + 1
    progress = 0.0
    if next_level_id <= 4:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        from .loyalty import LOYALTY_LEVELS
        next_level = LOYALTY_LEVELS.get(next_level_id)
        if next_level:
            progress_made = total_spent - level_info["min_spent"]
            needed = next_level["min_spent"] - level_info["min_spent"]
            progress = min(1.0, progress_made / needed) if needed > 0 else 1.0
    
    return {
        "level": profile_type,
        "balance": balance,
        "visits": visits,
        "loyalty_level": level_info["name"],
        "loyalty_progress": progress
    }

def smart_welcome_message(user_name: str, user_id: int) -> tuple[str, types.InlineKeyboardMarkup]:
    """
    üöÄ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    profile = get_user_profile(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    hour = datetime.now().hour
    if 6 <= hour < 12:
        time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= hour < 18:
        time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    else:
        time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    
    if profile["level"] == "new":
        # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ—Å—Ç–æ–µ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        message = (
            f"üëã {time_greeting}, {user_name}!\n\n"
            f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!\n\n"
            f"üí∞ –í–∞—à–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã: {fmt_money(profile['balance'])}\n\n"
            f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
        )
        
        kb = InlineKeyboardBuilder()
        kb.row(
            types.InlineKeyboardButton(
                text="üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                web_app=types.WebAppInfo(url=MINIAPP_URL)
            )
        )
        kb.row(
            types.InlineKeyboardButton(text="üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data="onboarding_start"),
            types.InlineKeyboardButton(text="üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ —á–∞—Ç–µ", callback_data="continue_chat")
        )
        
    elif profile["level"] == "experienced":
        # –î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        message = (
            f"üëã {time_greeting}, {user_name}!\n\n"
            f"üéØ –í–∞—à —Å—Ç–∞—Ç—É—Å: {profile['loyalty_level']} ‚≠ê\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {fmt_money(profile['balance'])}\n\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:\n"
            f"{'‚ñì' * int(profile['loyalty_progress'] * 10)}{'‚ñë' * (10 - int(profile['loyalty_progress'] * 10))} {profile['loyalty_progress']:.0%}\n\n"
            f"üî• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            f"‚Ä¢ –ü–æ—Ä–∞ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–∏–¥–∫–∞ 15% –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏"
        )
        
        kb = InlineKeyboardBuilder()
        kb.row(
            types.InlineKeyboardButton(
                text="üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                web_app=types.WebAppInfo(url=MINIAPP_URL)
            )
        )
        kb.row(
            types.InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û", callback_data="quick_booking"),
            types.InlineKeyboardButton(text="üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ —á–∞—Ç–µ", callback_data="continue_chat")
        )
        
    else:  # VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        # –î–ª—è VIP - —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        message = (
            f"üëã {time_greeting}, {user_name}!\n\n"
            f"üëë –í–∞—à VIP —Å—Ç–∞—Ç—É—Å: {profile['loyalty_level']}\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: {fmt_money(profile['balance'])}\n\n"
            f"üåü –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n"
            f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å\n"
            f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä\n"
            f"‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ –¥–æ 40% –æ—Ç —á–µ–∫–∞\n\n"
            f"‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
        )
        
        kb = InlineKeyboardBuilder()
        kb.row(
            types.InlineKeyboardButton(
                text="üåü VIP-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                web_app=types.WebAppInfo(url=MINIAPP_URL)
            )
        )
        kb.row(
            types.InlineKeyboardButton(text="üéÅ –°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã", callback_data="quick_redeem"),
            types.InlineKeyboardButton(text="üìÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å", callback_data="vip_booking")
        )
        kb.row(
            types.InlineKeyboardButton(text="üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ —á–∞—Ç–µ", callback_data="continue_chat")
        )
    
    return message, kb.as_markup()

def adaptive_main_menu(user_id: int) -> types.ReplyKeyboardMarkup:
    """
    –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –∏–∑–±—ã—Ç–∫–∞ —ç–º–æ–¥–∑–∏
    """
    kb = ReplyKeyboardBuilder()
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    kb.row(
        types.KeyboardButton(text="–ë–∞–ª–∞–Ω—Å"),
        types.KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å")
    )
    kb.row(
        types.KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π"),
        types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")
    )
    kb.row(
        types.KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è")
    )
    
    return kb.as_markup(resize_keyboard=True)

def smart_balance_kb(user_id: int) -> types.InlineKeyboardMarkup:
    """
    üí∞ –£–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –±–∞–ª–∞–Ω—Å–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    profile = get_user_profile(user_id)
    kb = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    kb.row(
        types.InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="show_status"),
        types.InlineKeyboardButton(text="üéÅ –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="show_benefits")
    )
    
    if profile["balance"] > 0:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–Ω—É—Å—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        kb.row(
            types.InlineKeyboardButton(text="üí° –ö–∞–∫ –ª—É—á—à–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å?", callback_data="spending_recommendations"),
            types.InlineKeyboardButton(text="üìù –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="show_transactions")
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –±–æ–Ω—É—Å–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å
        kb.row(
            types.InlineKeyboardButton(text="üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–Ω—É—Å—ã?", callback_data="earning_tips"),
            types.InlineKeyboardButton(text="üìù –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="show_transactions")
        )
    
    if profile["level"] in ["experienced", "vip"]:
        # –î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        kb.row(
            types.InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="show_achievements")
        )
    
    return kb.as_markup()

def contextual_notification_kb(notification_type: str) -> types.InlineKeyboardMarkup:
    """
    üì± –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    kb = InlineKeyboardBuilder()
    
    if notification_type == "maintenance_due":
        kb.row(
            types.InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å", callback_data="quick_booking"),
            types.InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", callback_data="remind_later")
        )
    elif notification_type == "discount_expiring":
        kb.row(
            types.InlineKeyboardButton(text="üìÖ –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="use_discount"),
            types.InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞", callback_data="remind_tomorrow")
        )
    elif notification_type == "new_achievement":
        kb.row(
            types.InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É", callback_data="claim_reward"),
            types.InlineKeyboardButton(text="üëÄ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="show_achievements")
        )
    elif notification_type == "status_upgrade":
        kb.row(
            types.InlineKeyboardButton(text="üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã", callback_data="use_bonus"),
            types.InlineKeyboardButton(text="üìä –ú–æ–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="show_benefits")
        )
    
    return kb.as_markup()

def gamification_progress_kb(current_level: str, progress: float) -> types.InlineKeyboardMarkup:
    """
    üéÆ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    """
    kb = InlineKeyboardBuilder()
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
    kb.row(
        types.InlineKeyboardButton(text="üéØ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π", callback_data="action_plan"),
        types.InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="detailed_progress")
    )
    
    # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–æ–ª—å—à–µ 80% - –º–æ—Ç–∏–≤–∏—Ä—É–µ–º –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä—ã–≤–æ–∫
    if progress > 0.8:
        kb.row(
            types.InlineKeyboardButton(text="üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä—ã–≤–æ–∫!", callback_data="final_push")
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    kb.row(
        types.InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ (+2x –±–æ–Ω—É—Å)", callback_data="invite_friend"),
        types.InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="leaderboard")
    )
    
    return kb.as_markup()

def smart_booking_flow_kb(step: str, context: dict = None) -> types.InlineKeyboardMarkup:
    """
    üìÖ –£–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    kb = InlineKeyboardBuilder()
    
    if step == "service_selection":
        # –ü–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å–ª—É–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–û
        if context and context.get("recommended_services"):
            kb.row(
                types.InlineKeyboardButton(text="üéØ –í—ã–±—Ä–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ", callback_data="select_recommended")
            )
        
        kb.row(
            types.InlineKeyboardButton(text="üìã –í—Å–µ —É—Å–ª—É–≥–∏", callback_data="all_services"),
            types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏", callback_data="search_service")
        )
        
    elif step == "master_selection":
        # –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        if context and context.get("preferred_master"):
            kb.row(
                types.InlineKeyboardButton(text="üåü –í–∞—à –º–∞—Å—Ç–µ—Ä", callback_data="preferred_master")
            )
        
        kb.row(
            types.InlineKeyboardButton(text="üë• –í—Å–µ –º–∞—Å—Ç–µ—Ä–∞", callback_data="all_masters"),
            types.InlineKeyboardButton(text="‚ö° –ü–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π", callback_data="any_master")
        )
        
    elif step == "time_selection":
        # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–¥–æ–±–Ω—ã–µ —Å–ª–æ—Ç—ã
        kb.row(
            types.InlineKeyboardButton(text="‚ö° –ë–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç", callback_data="next_slot"),
            types.InlineKeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="select_date")
        )
        
        if context and context.get("preferred_times"):
            kb.row(
                types.InlineKeyboardButton(text="‚≠ê –í–∞—à–∏ —É–¥–æ–±–Ω—ã–µ —á–∞—Å—ã", callback_data="preferred_times")
            )
    
    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    kb.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="booking_back"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="booking_cancel")
    )
    
    return kb.as_markup()

def onboarding_kb(step: int) -> types.InlineKeyboardMarkup:
    """
    üöÄ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    kb = InlineKeyboardBuilder()
    
    if step == 1:
        # –ü–µ—Ä–≤—ã–π —à–∞–≥ - –Ω–∞—á–∞–ª–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        kb.row(
            types.InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="onboarding_step_2"),
            types.InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="onboarding_skip")
        )
    elif step == 2:
        # –í—Ç–æ—Ä–æ–π —à–∞–≥ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        kb.row(
            types.InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ", callback_data="add_car"),
            types.InlineKeyboardButton(text="‚è≠ –ü–æ–∑–∂–µ", callback_data="onboarding_step_3")
        )
    elif step == 3:
        # –¢—Ä–µ—Ç–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        kb.row(
            types.InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û", callback_data="first_booking"),
            types.InlineKeyboardButton(text="üìä –ò–∑—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="show_history")
        )
        kb.row(
            types.InlineKeyboardButton(text="üí° –£–∑–Ω–∞—Ç—å –æ –±–æ–Ω—É—Å–∞—Ö", callback_data="bonus_info"),
            types.InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
        )
    
    return kb.as_markup()

def personalized_support_kb(user_id: int) -> types.InlineKeyboardMarkup:
    """
    üí¨ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    profile = get_user_profile(user_id)
    kb = InlineKeyboardBuilder()
    
    if profile["level"] == "new":
        # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –±–∞–∑–æ–≤–∞—è –ø–æ–º–æ—â—å
        kb.row(
            types.InlineKeyboardButton(text="‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞?", callback_data="system_help"),
            types.InlineKeyboardButton(text="üí° –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", callback_data="first_steps")
        )
        kb.row(
            types.InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact_support")
        )
    else:
        # –î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å
        kb.row(
            types.InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq"),
            types.InlineKeyboardButton(text="üìã –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", callback_data="user_guide")
        )
        kb.row(
            types.InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact_support"),
            types.InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="feedback")
        )
    
    if profile["level"] == "vip":
        # –î–ª—è VIP - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        kb.row(
            types.InlineKeyboardButton(text="üëë VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="vip_support")
        )
    
    return kb.as_markup()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def get_motivational_tip(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = get_user_profile(user_id)
    
    tips = {
        "new": [
            "üí° –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –¢–û —á–µ—Ä–µ–∑ –±–æ—Ç –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–≤–æ–π–Ω—ã–µ –±–æ–Ω—É—Å—ã!",
            "üéØ –ö–∞–∂–¥–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ Silver —Å—Ç–∞—Ç—É—Å—É!",
            "‚≠ê –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ +500 –±–æ–Ω—É—Å–æ–≤!"
        ],
        "experienced": [
            "üöÄ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!",
            "üíé –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–Ω—É—Å—ã —Å —É–º–æ–º - —ç–∫–æ–Ω–æ–º—å—Ç–µ –¥–æ 30%!",
            "üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ä–∞—Å—Ç–µ—Ç!"
        ],
        "vip": [
            "üëë –ö–∞–∫ VIP –∫–ª–∏–µ–Ω—Ç, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!",
            "üåü –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!",
            "üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å!"
        ]
    }
    
    return random.choice(tips.get(profile["level"], tips["new"]))
