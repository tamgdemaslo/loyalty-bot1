# loyalty-bot/bot/analytics.py
"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
"""

from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from .db import conn, get_agent_id, get_bonus_transactions
from .moysklad import fetch_shipments, fetch_demand_full
from .formatting import fmt_money, fmt_date_local
from .loyalty import get_level_info, LOYALTY_LEVELS


def get_client_statistics(agent_id: str) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞: —Ç—Ä–∞—Ç—ã, –ø–æ—Å–µ—â–µ–Ω–∏—è, —ç–∫–æ–Ω–æ–º–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    shipments = fetch_shipments(agent_id, limit=100)
    
    if not shipments:
        return {
            "total_spent": 0,
            "total_visits": 0,
            "total_saved": 0,
            "avg_check": 0,
            "first_visit": None,
            "last_visit": None,
            "visits_this_month": 0,
            "spent_this_month": 0,
            "period_days": 0
        }
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_spent = sum(s["sum"] for s in shipments)
    total_visits = len(shipments)
    
    # –î–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
    dates = [datetime.fromisoformat(s["moment"].replace("Z", "+00:00")) for s in shipments]
    first_visit = min(dates)
    last_visit = max(dates)
    period_days = (last_visit - first_visit).days + 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_month = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    visits_this_month = sum(1 for d in dates if d >= current_month)
    spent_this_month = sum(
        s["sum"] for s in shipments 
        if datetime.fromisoformat(s["moment"].replace("Z", "+00:00")) >= current_month
    )
    
    # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
    avg_check = total_spent // total_visits if total_visits > 0 else 0
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é (—Å–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤ –±—ã–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
    saved_transactions = conn.execute("""
        SELECT COALESCE(SUM(amount), 0) as total_saved
        FROM bonus_transactions
        WHERE agent_id = ? AND transaction_type = 'redemption'
    """, (agent_id,)).fetchone()
    
    total_saved = saved_transactions[0] if saved_transactions else 0
    
    return {
        "total_spent": total_spent,
        "total_visits": total_visits,
        "total_saved": total_saved,
        "avg_check": avg_check,
        "first_visit": first_visit,
        "last_visit": last_visit,
        "visits_this_month": visits_this_month,
        "spent_this_month": spent_this_month,
        "period_days": period_days
    }


def get_client_ranking(agent_id: str) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ç—Ä–∞—Ç –∫–ª–∏–µ–Ω—Ç–∞
    client_spent = conn.execute(
        "SELECT total_spent FROM loyalty_levels WHERE agent_id = ?",
        (agent_id,)
    ).fetchone()
    
    if not client_spent:
        return {
            "rank": 0,
            "total_clients": 0,
            "percentile": 0,
            "spent_rank": 0
        }
    
    client_spent = client_spent[0]
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
    total_clients = conn.execute(
        "SELECT COUNT(*) FROM loyalty_levels"
    ).fetchone()[0]
    
    # –†–µ–π—Ç–∏–Ω–≥ –ø–æ —Ç—Ä–∞—Ç–∞–º (—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –º–µ–Ω—å—à–µ)
    spent_rank = conn.execute(
        "SELECT COUNT(*) + 1 FROM loyalty_levels WHERE total_spent > ?",
        (client_spent,)
    ).fetchone()[0]
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å
    percentile = ((total_clients - spent_rank + 1) / total_clients * 100) if total_clients > 0 else 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    top_clients = conn.execute("""
        SELECT 
            ll.agent_id,
            ll.total_spent,
            ll.level_id,
            um.fullname
        FROM loyalty_levels ll
        LEFT JOIN user_map um ON ll.agent_id = um.agent_id
        ORDER BY ll.total_spent DESC
        LIMIT 10
    """).fetchall()
    
    return {
        "rank": spent_rank,
        "total_clients": total_clients,
        "percentile": percentile,
        "spent_rank": spent_rank,
        "top_clients": [
            {
                "agent_id": row[0],
                "total_spent": row[1],
                "level_id": row[2],
                "fullname": row[3] or "–ö–ª–∏–µ–Ω—Ç"
            }
            for row in top_clients
        ]
    }


def get_bonus_history(agent_id: str, days: int = 30) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏ —Å–ø–∏—Å–∞–Ω–∏–π –±–æ–Ω—É—Å–æ–≤
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db.py –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    return get_bonus_transactions(agent_id, days)


def get_loyalty_distribution() -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    """
    distribution = conn.execute("""
        SELECT 
            level_id,
            COUNT(*) as count,
            AVG(total_spent) as avg_spent,
            MIN(total_spent) as min_spent,
            MAX(total_spent) as max_spent
        FROM loyalty_levels
        GROUP BY level_id
        ORDER BY level_id
    """).fetchall()
    
    result = {}
    total_clients = sum(row[1] for row in distribution)
    
    for row in distribution:
        level_id, count, avg_spent, min_spent, max_spent = row
        level_info = get_level_info(level_id)
        
        result[level_id] = {
            "name": level_info["name"],
            "emoji": level_info["emoji"],
            "count": count,
            "percentage": (count / total_clients * 100) if total_clients > 0 else 0,
            "avg_spent": int(avg_spent or 0),
            "min_spent": int(min_spent or 0),
            "max_spent": int(max_spent or 0)
        }
    
    return result


def format_client_statistics(stats: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if stats["total_visits"] == 0:
        return "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\nüìù –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö"
    
    # –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π
    if stats["period_days"] > 0:
        visit_frequency = stats["total_visits"] / (stats["period_days"] / 30)  # –ø–æ—Å–µ—â–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü
        frequency_text = f"{visit_frequency:.1f} —Ä–∞–∑ –≤ –º–µ—Å—è—Ü"
    else:
        frequency_text = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
    
    text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üí∞ <b>–û–±—â–∏–µ —Ç—Ä–∞—Ç—ã:</b> {fmt_money(stats['total_spent'])}\n"
        f"üìà <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π:</b> {stats['total_visits']}\n"
        f"üí≥ <b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b> {fmt_money(stats['avg_check'])}\n"
        f"üéÅ <b>–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –±–æ–Ω—É—Å–∞–º–∏:</b> {fmt_money(stats['total_saved'])}\n\n"
        f"üìÖ <b>–ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ:</b> {fmt_date_local(stats['first_visit'].isoformat()) if stats['first_visit'] else '–ù/–î'}\n"
        f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ:</b> {fmt_date_local(stats['last_visit'].isoformat()) if stats['last_visit'] else '–ù/–î'}\n"
        f"üîÑ <b>–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π:</b> {frequency_text}\n\n"
        f"üìä <b>–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b>\n"
        f"‚Ä¢ –ü–æ—Å–µ—â–µ–Ω–∏–π: {stats['visits_this_month']}\n"
        f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {fmt_money(stats['spent_this_month'])}"
    )
    
    return text


def format_client_ranking(ranking: Dict, agent_id: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if ranking["total_clients"] == 0:
        return "üèÜ <b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥</b>\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∞–ª—å
    if ranking["percentile"] >= 90:
        medal = "ü•á"
        rank_desc = "–¢–æ–ø 10%"
    elif ranking["percentile"] >= 75:
        medal = "ü•à"
        rank_desc = "–¢–æ–ø 25%"
    elif ranking["percentile"] >= 50:
        medal = "ü•â"
        rank_desc = "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
    else:
        medal = "üìä"
        rank_desc = "–†–∞—Å—Ç—É—â–∏–π –∫–ª–∏–µ–Ω—Ç"
    
    text = (
        f"üèÜ <b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
        f"{medal} <b>–ü–æ–∑–∏—Ü–∏—è:</b> {ranking['rank']} –∏–∑ {ranking['total_clients']}\n"
        f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å:</b> {ranking['percentile']:.1f}% ({rank_desc})\n\n"
        f"<b>üî• –¢–æ–ø-5 –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –∫–ª–∏–µ–Ω—Ç–æ–≤
    for i, client in enumerate(ranking["top_clients"][:5], 1):
        level_info = get_level_info(client["level_id"])
        is_current = client["agent_id"] == agent_id
        marker = "üëë" if is_current else f"{i}."
        
        text += (
            f"{marker} {level_info['emoji']} "
            f"{'<b>' if is_current else ''}"
            f"{client['fullname'][:15]}{'...' if len(client['fullname']) > 15 else ''} - "
            f"{fmt_money(client['total_spent'])}"
            f"{'</b>' if is_current else ''}\n"
        )
    
    return text


def format_bonus_history(history: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not history:
        return "üìù <b>–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏ —Å–ø–∏—Å–∞–Ω–∏–π</b>\n\n–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞"
    
    text = "üìù <b>–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)</b>\n\n"
    
    total_accrued = sum(h["amount"] for h in history if h["type"] == "accrual")
    total_redeemed = sum(h["amount"] for h in history if h["type"] == "redemption")
    
    text += (
        f"üìä <b>–ò—Ç–æ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b>\n"
        f"‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–æ: +{fmt_money(total_accrued)}\n"
        f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: -{fmt_money(total_redeemed)}\n\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
    )
    
    for transaction in history[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
        date_str = transaction["date"].strftime("%d.%m.%Y")
        
        if transaction["type"] == "accrual":
            emoji = "üìà"
            sign = "+"
        else:
            emoji = "üìâ"
            sign = "-"
        
        text += (
            f"{emoji} {date_str} {sign}{fmt_money(transaction['amount'])}\n"
            f"   <i>{transaction['description']}</i>\n\n"
        )
    
    return text


def get_monthly_analytics() -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Å—è—á–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    """
    current_month = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
    level_stats = conn.execute("""
        SELECT 
            level_id,
            COUNT(*) as clients,
            SUM(total_spent) as total_revenue,
            AVG(total_spent) as avg_spent
        FROM loyalty_levels
        GROUP BY level_id
        ORDER BY level_id
    """).fetchall()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_stats = conn.execute("""
        SELECT 
            COUNT(*) as total_clients,
            SUM(balance) as total_bonuses,
            AVG(balance) as avg_balance
        FROM bonuses
    """).fetchone()
    
    return {
        "level_distribution": {
            row[0]: {
                "clients": row[1],
                "revenue": row[2] or 0,
                "avg_spent": row[3] or 0
            }
            for row in level_stats
        },
        "total_clients": total_stats[0] if total_stats else 0,
        "total_bonuses": total_stats[1] if total_stats else 0,
        "avg_balance": total_stats[2] if total_stats else 0
    }
