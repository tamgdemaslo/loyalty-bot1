"""
üß† –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ —É–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
–ú–∏–Ω–∏–º—É–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏, –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass

from bot.db import get_agent_id, get_balance, conn
from bot.ux_keyboards import get_user_profile
from ux_copy_texts_minimal import MaintenanceTexts, GamificationTexts, DynamicTexts

log = logging.getLogger(__name__)

@dataclass
class SmartInsight:
    """–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    type: str  # 'saving', 'maintenance', 'bonus'
    title: str
    message: str
    action_text: str
    action_data: str

class PersonalAssistant:
    """–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫"""
    
    def __init__(self):
        self.insights_cache = {}
    
    async def get_smart_insights(self, user_id: int) -> List[SmartInsight]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        agent_id = get_agent_id(user_id)
        if not agent_id:
            return []
        
        profile = get_user_profile(user_id)
        insights = []
        
        # –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
        balance_insight = self._analyze_balance(profile)
        if balance_insight:
            insights.append(balance_insight)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é
        maintenance_insight = self._analyze_maintenance(agent_id)
        if maintenance_insight:
            insights.append(maintenance_insight)
        
        return insights[:2]  # –ú–∞–∫—Å–∏–º—É–º 2 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    
    def _analyze_balance(self, profile: Dict) -> Optional[SmartInsight]:
        """–ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞"""
        balance = profile['balance']
        
        if balance >= 1000:
            return SmartInsight(
                type='saving',
                title='–ú–æ–∂–µ—Ç–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –¢–û',
                message=f'–£ –≤–∞—Å {balance:,} ‚ÇΩ –±–æ–Ω—É—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.',
                action_text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã',
                action_data='show_savings_calculator'
            )
        elif balance >= 300:
            return SmartInsight(
                type='saving',
                title='–ù–∞–∫–æ–ø–ª–µ–Ω–∞ —Ö–æ—Ä–æ—à–∞—è —Å—É–º–º–∞',
                message=f'{balance:,} ‚ÇΩ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –º–æ–π–∫—É –∏–ª–∏ –º–µ–ª–∫–∏–π —Ä–µ–º–æ–Ω—Ç.',
                action_text='–ß—Ç–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å',
                action_data='show_spending_options'
            )
        
        return None
    
    def _analyze_maintenance(self, agent_id: str) -> Optional[SmartInsight]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–µ–π
            last_visit = conn.execute(
                "SELECT demand_id FROM accrual_log WHERE demand_id LIKE ? LIMIT 1", 
                (f"%{agent_id}%",)
            ).fetchone()
            
            if not last_visit:
                return SmartInsight(
                    type='maintenance',
                    title='–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É',
                    message='–î–∞–≤–Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å? –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.',
                    action_text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è',
                    action_data='book_diagnostics'
                )
        except Exception as e:
            log.error(f"Error checking maintenance: {e}")
        
        return None

class SimpleAchievementSystem:
    """–£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.achievements = {
            'first_visit': {
                'title': '–ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ',
                'reward': 100,
                'condition': {'visits': 1}
            },
            'regular_client': {
                'title': '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
                'reward': 200,
                'condition': {'visits': 5}
            },
            'good_saver': {
                'title': '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å',
                'reward': 150,
                'condition': {'balance': 1000}
            }
        }
    
    async def check_achievements(self, user_id: int) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è)"""
        agent_id = get_agent_id(user_id)
        if not agent_id:
            return []
        
        profile = get_user_profile(user_id)
        unlocked = self._get_user_achievements(user_id)
        new_achievements = []
        
        for achievement_id, achievement in self.achievements.items():
            if achievement_id in unlocked:
                continue
                
            if self._check_condition(achievement['condition'], profile):
                new_achievements.append(achievement)
                self._unlock_achievement(user_id, achievement_id)
        
        return new_achievements
    
    def _check_condition(self, condition: Dict, profile: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        if 'visits' in condition:
            return profile.get('visits', 0) >= condition['visits']
        if 'balance' in condition:
            return profile.get('balance', 0) >= condition['balance']
        return False
    
    def _get_user_achievements(self, user_id: int) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = conn.execute(
                "SELECT achievement_id FROM user_achievements WHERE user_id = ?",
                (user_id,)
            ).fetchall()
            return [row[0] for row in result]
        except:
            # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            conn.execute("""
                CREATE TABLE IF NOT EXISTS user_achievements (
                    user_id INTEGER,
                    achievement_id TEXT,
                    unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY (user_id, achievement_id)
                )
            """)
            conn.commit()
            return []
    
    def _unlock_achievement(self, user_id: int, achievement_id: str):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        try:
            conn.execute(
                "INSERT OR IGNORE INTO user_achievements (user_id, achievement_id) VALUES (?, ?)",
                (user_id, achievement_id)
            )
            conn.commit()
        except Exception as e:
            log.error(f"Error unlocking achievement: {e}")

class SimpleRecommendationEngine:
    """–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    async def get_recommendations(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        profile = get_user_profile(user_id)
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å–ª—É–≥–∞–º
        balance = profile.get('balance', 0)
        level = profile.get('level', 'new')
        
        if balance > 500:
            recommendations.append({
                'type': 'service',
                'title': '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –º–æ–π–∫–∞',
                'description': '–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –º–æ–π–∫–∏'
            })
        
        if level == 'new':
            recommendations.append({
                'type': 'service', 
                'title': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
                'description': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'
            })
        
        return recommendations

# –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤
__all__ = [
    'PersonalAssistant',
    'SimpleAchievementSystem', 
    'SimpleRecommendationEngine',
    'SmartInsight'
]
