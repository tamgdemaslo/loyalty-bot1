"""
üìù –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
–ß–∏—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã, –º–∏–Ω–∏–º—É–º —ç–º–æ–¥–∑–∏, –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã
"""

import logging
from aiogram import types, F
from aiogram.enums import ContentType, ChatAction
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardMarkup, InlineKeyboardBuilder

from bot.db import register_mapping, get_agent_id, get_balance, change_balance, conn
from bot.moysklad import find_agent_by_phone, fetch_shipments, fetch_demand_full
from bot.formatting import fmt_money, fmt_date_local
from bot.accrual import doc_age_seconds, accrue_for_demand
from bot.ux_keyboards import get_user_profile, adaptive_main_menu

# –ò–º–ø–æ—Ä—Ç –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
from ux_copy_texts_minimal import (
    WelcomeTexts, BalanceTexts, BookingTexts, RedeemTexts,
    AnalyticsTexts, MaintenanceTexts, SupportTexts, ErrorTexts,
    GamificationTexts, TextHelpers
)

# –ò–º–ø–æ—Ä—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã—Ö —É–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from bot.smart_features_minimal import (
    PersonalAssistant, SimpleAchievementSystem, SimpleRecommendationEngine
)

log = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â—ë–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
personal_assistant = PersonalAssistant()
achievement_system = SimpleAchievementSystem()
recommendation_engine = SimpleRecommendationEngine()

class MinimalStates(StatesGroup):
    wait_name = State()
    booking_service = State()
    redeem_amount = State()

def register_minimal_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @dp.message(CommandStart())
    async def minimal_start(m: types.Message):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —ç–º–æ–¥–∑–∏"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        user_name = m.from_user.first_name or "–¥—Ä—É–≥"
        
        if agent_id:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            profile = get_user_profile(m.from_user.id)
            time_greeting = TextHelpers.get_time_greeting()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            insights = await personal_assistant.get_smart_insights(m.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–±–µ–∑ —Ñ–∞–Ω—Ñ–∞—Ä)
            new_achievements = await achievement_system.check_achievements(m.from_user.id)
            
            message = WelcomeTexts.returning_user(
                name=user_name,
                status=profile['loyalty_level'],
                balance=profile['balance'],
                time_greeting=time_greeting
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
            if insights:
                insight = insights[0]
                message += f"\n\n{insight.title}\n{insight.message}"
            
            # –¢–∏—Ö–æ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if new_achievements:
                for achievement in new_achievements:
                    change_balance(agent_id, achievement['reward'])
            
            return await m.answer(message, reply_markup=adaptive_main_menu(m.from_user.id))
        
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        kb = ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        
        await m.answer(WelcomeTexts.new_user_greeting(), reply_markup=kb)

    @dp.message(F.content_type == ContentType.CONTACT)
    async def minimal_contact_auth(m: types.Message, state: FSMContext):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        phone = m.contact.phone_number
        agent_id = find_agent_by_phone(phone)
        user_name = m.from_user.first_name or "–¥—Ä—É–≥"

        if agent_id:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            register_mapping(
                tg_id=m.from_user.id,
                agent_id=agent_id,
                phone=phone,
                fullname=m.contact.first_name or ""
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ
            last = fetch_shipments(agent_id, limit=1)
            welcome_bonus_msg = ""
            
            if last:
                did = last[0]["id"]
                already = conn.execute(
                    "SELECT 1 FROM accrual_log WHERE demand_id=?", (did,)
                ).fetchone()
                
                if not already:
                    full = fetch_demand_full(did)
                    if doc_age_seconds(full["moment"]) >= 300:
                        added = accrue_for_demand(full)
                        if added:
                            conn.execute(
                                "INSERT INTO accrual_log(demand_id) VALUES(?)", (did,)
                            )
                            conn.commit()
                            welcome_bonus_msg = f"\n\n–ù–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {fmt_money(added)}"

            profile = get_user_profile(m.from_user.id)
            time_greeting = TextHelpers.get_time_greeting()
            
            message = WelcomeTexts.returning_user(
                name=user_name,
                status=profile['loyalty_level'],
                balance=profile['balance'],
                time_greeting=time_greeting
            )
            message += welcome_bonus_msg
            
            await m.answer(message, reply_markup=adaptive_main_menu(m.from_user.id))
            return

        # –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        await state.set_state(MinimalStates.wait_name)
        await state.update_data(phone=phone)
        
        await m.answer(WelcomeTexts.new_client_name_request())

    @dp.message(MinimalStates.wait_name)
    async def minimal_got_name(m: types.Message, state: FSMContext):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        data = await state.get_data()
        phone = data["phone"]
        name = m.text.strip()

        try:
            import requests
            from bot.moysklad import MS_BASE, HEADERS
            
            payload = {
                "name": name,
                "phone": phone,
                "phones": [{"phone": phone}]
            }
            
            resp = requests.post(
                f"{MS_BASE}/counterparty",
                headers=HEADERS,
                json=payload,
                timeout=10,
            )
            resp.raise_for_status()
            agent_id = resp.json()["id"]

        except Exception as e:
            await m.answer(ErrorTexts.general_error())
            return

        register_mapping(m.from_user.id, agent_id, phone, name)
        await state.clear()

        await m.answer(WelcomeTexts.profile_created())
        await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=adaptive_main_menu(m.from_user.id))

    @dp.message(F.text.in_(["–ë–∞–ª–∞–Ω—Å", "üíé –ë–∞–ª–∞–Ω—Å"]))
    async def minimal_show_balance(m: types.Message):
        """–ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer(ErrorTexts.auth_required())

        profile = get_user_profile(m.from_user.id)
        balance = profile["balance"]
        status = profile["loyalty_level"]
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç
        if balance == 0:
            message = BalanceTexts.empty_balance(status)
        elif balance < 500:
            message = BalanceTexts.small_balance(balance, status)
        else:
            max_redeem = min(balance, int(balance * 0.3))
            message = BalanceTexts.good_balance(balance, status, max_redeem)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        insights = await personal_assistant.get_smart_insights(m.from_user.id)
        if insights:
            saving_insights = [i for i in insights if i.type == 'saving']
            if saving_insights:
                insight = saving_insights[0]
                message += f"\n\n{insight.title}\n{insight.message}"

        # –ü—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
        kb = InlineKeyboardBuilder()
        kb.row(types.InlineKeyboardButton(text="–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å—ã", callback_data="redeem_bonuses"))
        kb.row(types.InlineKeyboardButton(text="–ö–∞–∫ –Ω–∞–∫–æ–ø–∏—Ç—å", callback_data="earning_tips"))
        
        await m.answer(message, reply_markup=kb.as_markup())

    @dp.message(F.text.contains("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))
    async def minimal_booking_start(m: types.Message):
        """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å –±–µ–∑ –∏–∑–ª–∏—à–µ—Å—Ç–≤"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer(ErrorTexts.auth_required())

        await m.answer(BookingTexts.booking_start())
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = await recommendation_engine.get_recommendations(m.from_user.id)
        
        if recommendations:
            recommended_services = [r['title'] for r in recommendations]
        else:
            recommended_services = ["–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"]
        
        message = BookingTexts.service_recommendations(recommended_services)
        
        kb = InlineKeyboardBuilder()
        kb.row(types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É", callback_data="select_service"))
        kb.row(types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", callback_data="book_diagnostics"))
        
        await m.answer(message, reply_markup=kb.as_markup())

    @dp.message(F.text.contains("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    async def minimal_user_stats(m: types.Message):
        """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer(ErrorTexts.auth_required())

        profile = get_user_profile(m.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —à—É–º–∞
        new_achievements = await achievement_system.check_achievements(m.from_user.id)
        
        message = AnalyticsTexts.user_stats(
            status=profile['loyalty_level'],
            balance=profile['balance'],
            visits=profile['visits'],
            progress=profile['loyalty_progress']
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–ø–æ–∫–æ–π–Ω–æ
        if new_achievements:
            message += "\n\n–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
            for achievement in new_achievements:
                message += f"‚Ä¢ {achievement['title']} (+{achievement['reward']} ‚ÇΩ)\n"
                change_balance(agent_id, achievement['reward'])
        
        await m.answer(message)

    @dp.message(F.text.contains("–°–ø–∏—Å–∞—Ç—å"))
    async def minimal_redeem_bonuses(m: types.Message):
        """–°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤"""
        await m.bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer(ErrorTexts.auth_required())

        balance = get_balance(agent_id)
        
        if balance <= 0:
            return await m.answer(RedeemTexts.no_balance())
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        scenarios = [
            {
                "service": "–¢–û",
                "savings": min(balance, 1500),
                "remaining": balance - min(balance, 1500)
            },
            {
                "service": "–ó–∞–ø—á–∞—Å—Ç–∏",
                "savings": min(balance, 750),
                "remaining": balance - min(balance, 750)
            },
            {
                "service": "–ú–æ–π–∫–∞",
                "savings": min(balance, 500),
                "remaining": balance - min(balance, 500)
            }
        ]
        
        message = RedeemTexts.redeem_scenarios(balance, scenarios)
        
        kb = InlineKeyboardBuilder()
        kb.row(types.InlineKeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –¢–û", callback_data="redeem_to"))
        kb.row(types.InlineKeyboardButton(text="–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="redeem_other"))
        
        await m.answer(message, reply_markup=kb.as_markup())

    @dp.message(F.text.in_(["–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π", "üìä –ò—Å—Ç–æ—Ä–∏—è", "üìä –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è"]))
    async def minimal_visit_history(m: types.Message):
        """–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer(ErrorTexts.auth_required())

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = get_user_profile(m.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
        shipments = fetch_shipments(agent_id, limit=10)
        
        message = AnalyticsTexts.user_stats(
            status=profile['loyalty_level'],
            balance=profile['balance'],
            visits=profile['visits'],
            progress=profile['loyalty_progress']
        )
        
        message += "\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è:\n"
        
        if not shipments:
            message += "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π"
        else:
            for i, shipment in enumerate(shipments[:5], 1):
                date_str = fmt_date_local(shipment["moment"])
                amount = shipment.get("sum", 0) / 100  # –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
                message += f"{i}. {date_str} \u2022 {fmt_money(amount)}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        new_achievements = await achievement_system.check_achievements(m.from_user.id)
        if new_achievements:
            message += "\n\n–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
            for achievement in new_achievements:
                message += f"\u2022 {achievement['title']} (+{achievement['reward']} ‚ÇΩ)\n"
                change_balance(agent_id, achievement['reward'])
        
        await m.answer(message)

    @dp.message(F.text.in_(["–ü—Ä–æ—Ñ–∏–ª—å", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"]))
    async def minimal_user_profile(m: types.Message):
        """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏"""
        agent_id = get_agent_id(m.from_user.id)
        if not agent_id:
            return await m.answer(ErrorTexts.auth_required())
        
        profile = get_user_profile(m.from_user.id)
        total_spent = 25000  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        
        message = (
            f"–ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"–°—Ç–∞—Ç—É—Å: {profile['loyalty_level']}\n"
            f"–ë–æ–Ω—É—Å—ã: {fmt_money(profile['balance'])}\n"
            f"–ü–æ—Å–µ—â–µ–Ω–∏–π: {profile['visits']}\n"
            f"Telegram: @{m.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        unlocked = achievement_system._get_user_achievements(m.from_user.id)
        all_achievements = achievement_system.achievements
        
        if unlocked:
            message += "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
            unlocked_rewards = 0
            for achievement_id in unlocked:
                if achievement_id in all_achievements:
                    achievement = all_achievements[achievement_id]
                    message += f"\u2022 {achievement['title']}\n"
                    unlocked_rewards += achievement['reward']
            
            message += f"\n–ò—Ç–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {unlocked_rewards} ‚ÇΩ"
        else:
            message += "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
        
        await m.answer(message)

    @dp.message(F.text.in_(["–°–≤—è–∑–∞—Ç—å—Å—è", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]))
    async def minimal_support(m: types.Message):
        """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
        profile = get_user_profile(m.from_user.id)
        message = SupportTexts.support_menu(profile["level"])
        
        kb = InlineKeyboardBuilder()
        kb.row(types.InlineKeyboardButton(text="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–æ–Ω—É—Å—ã?", callback_data="system_help"))
        kb.row(types.InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="contact_support"))
        
        await m.answer(message, reply_markup=kb.as_markup())

    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    @dp.callback_query(F.data == "system_help")
    async def system_help(callback: types.CallbackQuery):
        await callback.message.edit_text(SupportTexts.how_it_works())

    @dp.callback_query(F.data == "contact_support")
    async def contact_support(callback: types.CallbackQuery):
        await callback.message.edit_text(SupportTexts.contact_info())

    @dp.callback_query(F.data == "earning_tips")
    async def earning_tips(callback: types.CallbackQuery):
        message = (
            "–ö–∞–∫ –Ω–∞–∫–æ–ø–∏—Ç—å –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤:\n\n"
            "‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç\n"
            "‚Ä¢ –ü–æ—Å–µ—â–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å —Ä–µ–≥—É–ª—è—Ä–Ω–æ\n"
            "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n"
            "‚Ä¢ –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏"
        )
        await callback.message.edit_text(message)

    @dp.callback_query(F.data == "redeem_bonuses")
    async def callback_redeem_bonuses(callback: types.CallbackQuery):
        """Callback –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤"""
        agent_id = get_agent_id(callback.from_user.id)
        if not agent_id:
            return await callback.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

        balance = get_balance(agent_id)
        
        if balance <= 0:
            return await callback.message.edit_text(RedeemTexts.no_balance())
        
        scenarios = [
            {
                "service": "–¢–û",
                "savings": min(balance, 1500),
                "remaining": balance - min(balance, 1500)
            },
            {
                "service": "–ó–∞–ø—á–∞—Å—Ç–∏",
                "savings": min(balance, 750),
                "remaining": balance - min(balance, 750)
            },
            {
                "service": "–ú–æ–π–∫–∞",
                "savings": min(balance, 500),
                "remaining": balance - min(balance, 500)
            }
        ]
        
        message = RedeemTexts.redeem_scenarios(balance, scenarios)
        
        kb = InlineKeyboardBuilder()
        kb.row(types.InlineKeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –¢–û", callback_data="redeem_to"))
        kb.row(types.InlineKeyboardButton(text="–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="redeem_other"))
        
        await callback.message.edit_text(message, reply_markup=kb.as_markup())

    @dp.callback_query(F.data == "redeem_to")
    async def redeem_to_service(callback: types.CallbackQuery):
        """–°–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¢–û"""
        await callback.message.edit_text(
            "–î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:\n\n"
            "1. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¢–û —á–µ—Ä–µ–∑ –±–æ—Ç\n"
            "2. –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å–æ–æ–±—â–∏—Ç–µ –æ –∂–µ–ª–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã\n"
            "3. –°–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å?",
            reply_markup=InlineKeyboardBuilder()
            .row(types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û", callback_data="book_service"))
            .as_markup()
        )

    @dp.callback_query(F.data == "redeem_other")
    async def redeem_other_options(callback: types.CallbackQuery):
        """–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è"""
        await callback.message.edit_text(
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤:\n\n"
            "‚Ä¢ –ú–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
            "‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏\n"
            "‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–∑–∏—Ç–µ."
        )

    @dp.callback_query(F.data == "show_savings_calculator")
    async def savings_calculator(callback: types.CallbackQuery):
        """–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∏"""
        profile = get_user_profile(callback.from_user.id)
        balance = profile['balance']
        
        scenarios = [
            {"service": "–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞", "cost": 3500, "discount": 30},
            {"service": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "cost": 2000, "discount": 40},
            {"service": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –¢–û", "cost": 8000, "discount": 25},
        ]
        
        message = f"–í–∞—à–∏ {balance:,} ‚ÇΩ –±–æ–Ω—É—Å–æ–≤ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å:\n\n"
        
        for scenario in scenarios:
            max_discount = min(balance, int(scenario['cost'] * scenario['discount'] / 100))
            final_cost = scenario['cost'] - max_discount
            message += f"{scenario['service']}\n"
            message += f"–¶–µ–Ω–∞: {scenario['cost']:,} ‚ÇΩ\n"
            message += f"–°–∫–∏–¥–∫–∞: {max_discount:,} ‚ÇΩ\n"
            message += f"–ö –¥–æ–ø–ª–∞—Ç–µ: {final_cost:,} ‚ÇΩ\n\n"
        
        await callback.message.edit_text(message)

    @dp.message()
    async def handle_unknown_message(m: types.Message):
        """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await m.answer(
            "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['register_minimal_handlers']
