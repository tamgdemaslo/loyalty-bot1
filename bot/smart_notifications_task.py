"""
ü§ñ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List

from aiogram import Bot
from bot.db import conn, get_agent_id
from bot.ux_keyboards import get_user_profile
from bot.smart_features import SmartNotificationSystem, PersonalAssistant, AchievementSystem

log = logging.getLogger(__name__)

class SmartNotificationScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.notification_system = SmartNotificationSystem(bot)
        self.personal_assistant = PersonalAssistant()
        self.achievement_system = AchievementSystem()
        self.last_check = datetime.now()
    
    async def run_notification_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        log.info("ü§ñ –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        while True:
            try:
                await self._process_notifications()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(30 * 60)
                
            except Exception as e:
                log.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _process_notifications(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        log.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = self._get_active_users()
        
        for user_id in active_users:
            try:
                await self._process_user_notifications(user_id)
            except Exception as e:
                log.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    def _get_active_users(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
            result = conn.execute("""
                SELECT DISTINCT tg_id 
                FROM telegram_mapping 
                LIMIT 50
            """).fetchall()
            
            return [row[0] for row in result if row[0]]
            
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            return []
    
    async def _process_user_notifications(self, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        agent_id = get_agent_id(user_id)
        if not agent_id:
            return
        
        profile = get_user_profile(user_id)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        await self._check_achievements(user_id)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å—ã —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º
        await self._check_bonus_expiry(user_id, profile)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é
        await self._check_maintenance_reminders(user_id, agent_id)
        
        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await self._send_motivational_notifications(user_id, profile)
    
    async def _check_achievements(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö"""
        try:
            new_achievements = await self.achievement_system.check_achievements(user_id)
            
            for achievement in new_achievements:
                await self.notification_system.send_smart_notification(
                    user_id=user_id,
                    notification_type='achievement_unlocked',
                    achievement=achievement
                )
                
                log.info(f"üèÜ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ '{achievement.title}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è {user_id}: {e}")
    
    async def _check_bonus_expiry(self, user_id: int, profile: dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –±–æ–Ω—É—Å–æ–≤"""
        try:
            balance = profile.get('balance', 0)
            
            if balance > 500:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –±–æ–Ω—É—Å–æ–≤
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞ 7 –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                await self.notification_system.send_smart_notification(
                    user_id=user_id,
                    notification_type='bonus_expiry',
                    days_left=7,
                    amount=balance
                )
                
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è {user_id}: {e}")
    
    async def _check_maintenance_reminders(self, user_id: int, agent_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
            insights = await self.personal_assistant.get_smart_insights(user_id)
            maintenance_insights = [i for i in insights if i.type == 'maintenance']
            
            if maintenance_insights:
                insight = maintenance_insights[0]
                
                await self.notification_system.send_smart_notification(
                    user_id=user_id,
                    notification_type='maintenance_due',
                    service='–¢–û',
                    km_left=5000  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                )
                
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¢–û –¥–ª—è {user_id}: {e}")
    
    async def _send_motivational_notifications(self, user_id: int, profile: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            last_visit = self._get_last_visit_date(user_id)
            
            if last_visit and (datetime.now() - last_visit).days > 30:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–≤–Ω–æ –Ω–µ –ø–æ—Å–µ—â–∞–ª —Å–µ—Ä–≤–∏—Å
                
                # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                await self.notification_system.send_smart_notification(
                    user_id=user_id,
                    notification_type='special_offer',
                    offer='–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤',
                    discount=20
                )
                
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {user_id}: {e}")
    
    def _get_last_visit_date(self, user_id: int) -> datetime:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –∏–∑ –±–∞–∑—ã
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–∞—Ç—É
            return datetime.now() - timedelta(days=20)
            
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞ –¥–ª—è {user_id}: {e}")
            return None
    
    async def send_daily_insights(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ VIP –∫–ª–∏–µ–Ω—Ç–∞–º
            vip_users = self._get_vip_users()
            
            for user_id in vip_users[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                try:
                    insights = await self.personal_assistant.get_smart_insights(user_id)
                    
                    if insights:
                        top_insight = insights[0]
                        
                        message = (
                            f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n"
                            f"{top_insight.emoji} {top_insight.title}\n"
                            f"{top_insight.message}\n\n"
                            f"üí™ –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
                        )
                        
                        await self.bot.send_message(
                            chat_id=user_id,
                            text=message
                        )
                        
                        log.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Ç—Ä–µ–Ω–Ω–∏–π –∏–Ω—Å–∞–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        
                except Exception as e:
                    log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏–Ω—Å–∞–π—Ç–∞ {user_id}: {e}")
                    
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
    
    def _get_vip_users(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return self._get_active_users()[:10]
            
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

async def start_smart_notifications(bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    scheduler = SmartNotificationScheduler(bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_task = asyncio.create_task(scheduler.run_notification_loop())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã (–∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00)
    async def daily_insights_loop():
        while True:
            now = datetime.now()
            # –ñ–¥–µ–º –¥–æ 9:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            next_9am = now.replace(hour=9, minute=0, second=0, microsecond=0)
            if now.hour >= 9:
                next_9am += timedelta(days=1)
            
            sleep_seconds = (next_9am - now).total_seconds()
            await asyncio.sleep(sleep_seconds)
            
            await scheduler.send_daily_insights()
    
    daily_task = asyncio.create_task(daily_insights_loop())
    
    return notification_task, daily_task

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['start_smart_notifications', 'SmartNotificationScheduler']
