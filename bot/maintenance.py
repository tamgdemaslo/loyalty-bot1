# loyalty-bot/bot/maintenance.py
"""
–ú–æ–¥—É–ª—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–¢–û)
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
"""

from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from .db_postgres import conn
from .formatting import fmt_date_local

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç –¢–û
MAINTENANCE_WORKS = {
    1: {
        "name": "–ó–∞–º–µ–Ω–∞ –º–æ—Ç–æ—Ä–Ω–æ–≥–æ –º–∞—Å–ª–∞ –≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ –∏ –º–∞—Å–ª—è–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞",
        "category": "–î–≤–∏–≥–∞—Ç–µ–ª—å",
        "mileage_interval": 7000,  # –∫–º
        "time_interval": 6,  # –º–µ—Å—è—Ü–µ–≤
        "priority": 1,  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1 - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π)
        "emoji": "üõ¢Ô∏è",
        "description": "–ó–∞–º–µ–Ω–∞ –º–æ—Ç–æ—Ä–Ω–æ–≥–æ –º–∞—Å–ª–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è"
    },
    2: {
        "name": "–†–∞–±–æ—Ç–∞ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–º–µ–Ω–µ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –º–∞—Å–ª–∞",
        "category": "–ö–æ—Ä–æ–±–∫–∞",
        "mileage_interval": 25000,
        "time_interval": 24,
        "priority": 2,
        "emoji": "‚öôÔ∏è",
        "description": "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –≤ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏"
    },
    3: {
        "name": "–†–∞–±–æ—Ç–∞ –ø–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–π –∑–∞–º–µ–Ω–µ –º–∞—Å–ª–∞ –≤ –ê–ö–ü–ü",
        "category": "–ö–æ—Ä–æ–±–∫–∞",
        "mileage_interval": 60000,
        "time_interval": 36,
        "priority": 3,
        "emoji": "üîß",
        "description": "–ü–æ–ª–Ω–∞—è –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ö–ü–ü"
    },
    4: {
        "name": "–ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω–æ–π –∂–∏–¥–∫–æ—Å—Ç–∏",
        "category": "–¢–æ—Ä–º–æ–∑–∞",
        "mileage_interval": 40000,
        "time_interval": 24,
        "priority": 2,
        "emoji": "üõë",
        "description": "–ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω–æ–π –∂–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    },
    5: {
        "name": "–ó–∞–º–µ–Ω–∞ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞",
        "category": "–î–≤–∏–≥–∞—Ç–µ–ª—å",
        "mileage_interval": 7000,
        "time_interval": 6,
        "priority": 2,
        "emoji": "üí®",
        "description": "–ó–∞–º–µ–Ω–∞ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è"
    },
    6: {
        "name": "–ó–∞–º–µ–Ω–∞ —Å–∞–ª–æ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞",
        "category": "–°–∞–ª–æ–Ω",
        "mileage_interval": 7000,
        "time_interval": 12,
        "priority": 3,
        "emoji": "üå¨Ô∏è",
        "description": "–ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–∞–ª–æ–Ω–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞"
    },
    7: {
        "name": "–ó–∞–º–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (–Ω–µ –≤ –±–∞–∫–µ)",
        "category": "–¢–æ–ø–ª–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        "mileage_interval": 20000,
        "time_interval": 12,
        "priority": 2,
        "emoji": "‚õΩ",
        "description": "–ó–∞–º–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞"
    }
}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ª—É–≥ –ú–æ–π–°–∫–ª–∞–¥ –∏ —Ä–∞–±–æ—Ç –¢–û
MOYSKLAD_SERVICE_MAPPING = {
    # –ó–¥–µ—Å—å –±—É–¥—É—Ç ID —É—Å–ª—É–≥ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–±–æ—Ç–∞–º –¢–û
    # –ü—Ä–∏–º–µ—Ä: "service_id_from_moysklad": work_id_from_MAINTENANCE_WORKS
    # –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
}


def init_maintenance_tables():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–æ–¥—É–ª—è –¢–û"""
    try:
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –¢–û
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS maintenance_history (
            id SERIAL PRIMARY KEY,
            agent_id TEXT NOT NULL,
            work_id INTEGER NOT NULL,
            performed_date DATE NOT NULL,
            mileage INTEGER NOT NULL,
            source TEXT NOT NULL, -- 'auto' (–∏–∑ –ú–æ–π–°–∫–ª–∞–¥) –∏–ª–∏ 'manual' (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
            demand_id TEXT, -- ID –æ—Ç–≥—Ä—É–∑–∫–∏ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ (–µ—Å–ª–∏ source='auto')
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (agent_id) REFERENCES bonuses(agent_id)
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¢–û –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS maintenance_settings (
            agent_id TEXT NOT NULL,
            work_id INTEGER NOT NULL,
            custom_mileage_interval INTEGER,
            custom_time_interval INTEGER,
            is_active BOOLEAN DEFAULT TRUE,
            PRIMARY KEY (agent_id, work_id),
            FOREIGN KEY (agent_id) REFERENCES bonuses(agent_id)
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ª—É–≥ –ú–æ–π–°–∫–ª–∞–¥ –∏ —Ä–∞–±–æ—Ç –¢–û
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS maintenance_service_mapping (
            moysklad_service_name TEXT PRIMARY KEY,
            work_id INTEGER NOT NULL,
            is_active BOOLEAN DEFAULT TRUE
        )
        """)
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_maintenance_history_agent_work 
            ON maintenance_history(agent_id, work_id)
        """)
        
        cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_maintenance_history_date 
            ON maintenance_history(performed_date)
        """)
        
        conn.commit()
        cursor.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü –¢–û: {e}")
        conn.rollback()


def get_work_info(work_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –¢–û"""
    return MAINTENANCE_WORKS.get(work_id, {})


def get_work_intervals(agent_id: str, work_id: int) -> Tuple[int, int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –¢–û (–ø—Ä–æ–±–µ–≥ –≤ –∫–º, –≤—Ä–µ–º—è –≤ –º–µ—Å—è—Ü–∞—Ö)
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    cursor = conn.cursor()
    cursor.execute(
        "SELECT custom_mileage_interval, custom_time_interval FROM maintenance_settings WHERE agent_id = %s AND work_id = %s",
        (agent_id, work_id)
    )
    custom_settings = cursor.fetchone()
    
    if custom_settings and (custom_settings[0] or custom_settings[1]):
        mileage_interval = custom_settings[0] or MAINTENANCE_WORKS[work_id]["mileage_interval"]
        time_interval = custom_settings[1] or MAINTENANCE_WORKS[work_id]["time_interval"]
        return mileage_interval, time_interval
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    work_info = MAINTENANCE_WORKS[work_id]
    return work_info["mileage_interval"], work_info["time_interval"]


def get_last_maintenance(agent_id: str, work_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –¢–û"""
    cursor = conn.cursor()
    cursor.execute("""
        SELECT performed_date, mileage, source, notes, created_at
        FROM maintenance_history 
        WHERE agent_id = %s AND work_id = %s
        ORDER BY performed_date DESC, created_at DESC
        LIMIT 1
    """, (agent_id, work_id))
    row = cursor.fetchone()
    
    if not row:
        return None
    
    return {
        "date": datetime.fromisoformat(row[0]),
        "mileage": row[1],
        "source": row[2],
        "notes": row[3] or "",
        "created_at": datetime.fromisoformat(row[4])
    }


def get_current_mileage(agent_id: str) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–≥—Ä—É–∑–∫–∏"""
    from .moysklad import fetch_shipments
    
    shipments = fetch_shipments(agent_id, limit=1)
    if not shipments:
        return 0
    
    try:
        from .moysklad import fetch_demand_full
        demand = fetch_demand_full(shipments[0]["id"])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–±–µ–≥ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        attributes = demand.get('attributes', [])
        for attr in attributes:
            if attr.get('name') == '–ü—Ä–æ–±–µ–≥':
                mileage_str = str(attr.get('value', '0'))
                # –û—á–∏—â–∞–µ–º –æ—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                mileage_clean = ''.join(filter(str.isdigit, mileage_str))
                return int(mileage_clean) if mileage_clean else 0
    except Exception:
        pass
    
    return 0


def calculate_maintenance_status(agent_id: str, work_id: int) -> Dict:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –¢–û:
    - –∫–æ–≥–¥–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑
    - –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
    - —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å (–ø—Ä–æ–±–µ–≥/–≤—Ä–µ–º—è)
    - —Å—Ç–∞—Ç—É—Å (–û–ö, –°–∫–æ—Ä–æ, –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)
    """
    work_info = get_work_info(work_id)
    if not work_info:
        return {"status": "error", "message": "–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    mileage_interval, time_interval = get_work_intervals(agent_id, work_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    last_maintenance = get_last_maintenance(agent_id, work_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥
    current_mileage = get_current_mileage(agent_id)
    
    # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å
    if not last_maintenance:
        return {
            "status": "never_done",
            "work_info": work_info,
            "current_mileage": current_mileage,
            "mileage_interval": mileage_interval,
            "time_interval": time_interval,
            "message": "–†–∞–±–æ—Ç–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å",
            "priority": "high"
        }
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    last_date = last_maintenance["date"]
    last_mileage = last_maintenance["mileage"]
    
    # –ü–æ –ø—Ä–æ–±–µ–≥—É
    next_mileage = last_mileage + mileage_interval
    mileage_remaining = next_mileage - current_mileage
    
    # –ü–æ –≤—Ä–µ–º–µ–Ω–∏
    next_date = last_date + timedelta(days=time_interval * 30)  # –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
    days_remaining = (next_date - datetime.now()).days
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    mileage_overdue = mileage_remaining <= 0
    time_overdue = days_remaining <= 0
    
    mileage_soon = mileage_remaining <= (mileage_interval * 0.1)  # 10% –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    time_soon = days_remaining <= 30  # –º–µ—Å—è—Ü
    
    if mileage_overdue or time_overdue:
        status = "overdue"
        priority = "critical"
        if mileage_overdue and time_overdue:
            message = f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(mileage_remaining)} –∫–º –∏ {abs(days_remaining)} –¥–Ω–µ–π"
        elif mileage_overdue:
            message = f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(mileage_remaining)} –∫–º"
        else:
            message = f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_remaining)} –¥–Ω–µ–π"
    elif mileage_soon or time_soon:
        status = "soon"
        priority = "high"
        if mileage_soon and time_soon:
            message = f"–°–∫–æ—Ä–æ: –æ—Å—Ç–∞–ª–æ—Å—å {mileage_remaining} –∫–º –∏–ª–∏ {days_remaining} –¥–Ω–µ–π"
        elif mileage_soon:
            message = f"–°–∫–æ—Ä–æ: –æ—Å—Ç–∞–ª–æ—Å—å {mileage_remaining} –∫–º"
        else:
            message = f"–°–∫–æ—Ä–æ: –æ—Å—Ç–∞–ª–æ—Å—å {days_remaining} –¥–Ω–µ–π"
    else:
        status = "ok"
        priority = "normal"
        message = f"–í –ø–æ—Ä—è–¥–∫–µ: –æ—Å—Ç–∞–ª–æ—Å—å {mileage_remaining} –∫–º –∏–ª–∏ {days_remaining} –¥–Ω–µ–π"
    
    return {
        "status": status,
        "priority": priority,
        "work_info": work_info,
        "last_maintenance": last_maintenance,
        "current_mileage": current_mileage,
        "next_mileage": next_mileage,
        "next_date": next_date,
        "mileage_remaining": mileage_remaining,
        "days_remaining": days_remaining,
        "mileage_interval": mileage_interval,
        "time_interval": time_interval,
        "message": message
    }


def get_all_maintenance_status(agent_id: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ä–∞–±–æ—Ç –¢–û –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    statuses = []
    
    for work_id in MAINTENANCE_WORKS.keys():
        status = calculate_maintenance_status(agent_id, work_id)
        status["work_id"] = work_id
        statuses.append(status)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: –∫—Ä–∏—Ç–∏—á–Ω—ã–µ, –≤—ã—Å–æ–∫–∏–µ, –æ–±—ã—á–Ω—ã–µ
    priority_order = {"critical": 0, "high": 1, "normal": 2}
    statuses.sort(key=lambda x: (
        priority_order.get(x.get("priority", "normal"), 2),
        x["work_info"]["priority"]
    ))
    
    return statuses


def add_manual_maintenance(agent_id: str, work_id: int, date: str, mileage: int, notes: str = "") -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä—É—á–Ω—É—é –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –¢–û"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if work_id not in MAINTENANCE_WORKS:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        try:
            datetime.fromisoformat(date)
        except ValueError:
            return False
        
        if mileage < 0:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO maintenance_history (agent_id, work_id, performed_date, mileage, source, notes)
            VALUES (%s, %s, %s, %s, 'manual', %s)
        """, (agent_id, work_id, date, mileage, notes))
        conn.commit()
        
        return True
    except Exception:
        return False


def add_auto_maintenance(agent_id: str, work_id: int, demand_id: str, date: str, mileage: int) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –¢–û (–∏–∑ –ú–æ–π–°–∫–ª–∞–¥)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –æ—Ç–≥—Ä—É–∑–∫–∏
        cursor = conn.cursor()
        cursor.execute(
            "SELECT 1 FROM maintenance_history WHERE demand_id = %s AND work_id = %s",
            (demand_id, work_id)
        )
        existing = cursor.fetchone()
        
        if existing:
            return False  # –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        
        cursor.execute("""
            INSERT INTO maintenance_history (agent_id, work_id, performed_date, mileage, source, demand_id)
            VALUES (%s, %s, %s, %s, 'auto', %s)
        """, (agent_id, work_id, date, mileage, demand_id))
        conn.commit()
        
        return True
    except Exception:
        return False


def process_moysklad_services(agent_id: str, demand_id: str, services: List[Dict], mileage: int, date: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ª—É–≥–∏ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –¢–û"""
    for service in services:
        service_name = service.get("assortment", {}).get("name", "")
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        cursor = conn.cursor()
        cursor.execute(
            "SELECT work_id FROM maintenance_service_mapping WHERE moysklad_service_name = %s AND is_active = TRUE",
            (service_name,)
        )
        mapping = cursor.fetchone()
        
        if mapping:
            work_id = mapping[0]
            add_auto_maintenance(agent_id, work_id, demand_id, date, mileage)


def format_maintenance_status(status: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –¢–û –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    work_info = status["work_info"]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
    if status["status"] == "overdue":
        status_icon = "üî¥"
    elif status["status"] == "soon":
        status_icon = "üü°"
    elif status["status"] == "never_done":
        status_icon = "‚ö™"
    else:
        status_icon = "üü¢"
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text = f"{status_icon} {work_info['emoji']} <b>{work_info['name']}</b>\n"
    text += f"üìÅ <i>{work_info['category']}</i>\n"
    
    if status["status"] == "never_done":
        text += f"‚ùó {status['message']}\n"
        text += f"üìè –†–µ–≥–ª–∞–º–µ–Ω—Ç: {status['mileage_interval']:,} –∫–º / {status['time_interval']} –º–µ—Å\n"
    else:
        last = status["last_maintenance"]
        text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {fmt_date_local(last['date'].isoformat())}\n"
        text += f"üõ£Ô∏è –ü—Ä–∏ –ø—Ä–æ–±–µ–≥–µ: {last['mileage']:,} –∫–º\n"
        
        if status["status"] == "overdue":
            text += f"‚ö†Ô∏è <b>{status['message']}</b>\n"
        elif status["status"] == "soon":
            text += f"‚è∞ <b>{status['message']}</b>\n"
        else:
            text += f"‚úÖ <b>{status['message']}</b>\n"
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        if last["source"] == "manual":
            text += f"‚úã –î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é"
        else:
            text += f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ —Å–µ—Ä–≤–∏—Å–µ"
        
        if last["notes"]:
            text += f"\nüìù {last['notes']}"
    
    return text


def format_maintenance_summary(statuses: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ä–∞–±–æ—Ç–∞–º –¢–û"""
    overdue_count = sum(1 for s in statuses if s["status"] == "overdue")
    soon_count = sum(1 for s in statuses if s["status"] == "soon")
    never_done_count = sum(1 for s in statuses if s["status"] == "never_done")
    ok_count = sum(1 for s in statuses if s["status"] == "ok")
    
    text = "üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</b>\n\n"
    
    if overdue_count > 0:
        text += f"üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:</b> {overdue_count}\n"
    if soon_count > 0:
        text += f"üü° <b>–°–∫–æ—Ä–æ –Ω—É–∂–Ω–æ:</b> {soon_count}\n"
    if never_done_count > 0:
        text += f"‚ö™ <b>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–ª–∏:</b> {never_done_count}\n"
    if ok_count > 0:
        text += f"üü¢ <b>–í –ø–æ—Ä—è–¥–∫–µ:</b> {ok_count}\n"
    
    text += f"\nüìä <b>–í—Å–µ–≥–æ —Ä–∞–±–æ—Ç:</b> {len(statuses)}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ
    critical_works = [s for s in statuses if s.get("priority") == "critical"][:3]
    if critical_works:
        text += "\nüö® <b>–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:</b>\n"
        for work in critical_works:
            text += f"‚Ä¢ {work['work_info']['emoji']} {work['work_info']['name'][:30]}...\n"
    
    return text


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
init_maintenance_tables()
