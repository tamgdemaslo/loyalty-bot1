import { format, parseISO, isValid } from 'date-fns';
import { ru } from 'date-fns/locale';

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º
export const formatMoney = (amount) => {
  if (!amount && amount !== 0) return '0 ‚ÇΩ';
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount);
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
export const formatBonuses = (amount) => {
  if (!amount && amount !== 0) return '0';
  return new Intl.NumberFormat('ru-RU').format(amount);
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
export const formatDate = (date, formatString = 'dd.MM.yyyy') => {
  if (!date) return '';
  
  try {
    const dateObj = typeof date === 'string' ? parseISO(date) : date;
    if (!isValid(dateObj)) return '';
    
    return format(dateObj, formatString, { locale: ru });
  } catch (error) {
    console.error('Error formatting date:', error);
    return '';
  }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
export const formatDateTime = (date) => {
  return formatDate(date, 'dd.MM.yyyy HH:mm');
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –¥–∞—Ç—ã
export const formatRelativeDate = (date) => {
  if (!date) return '';
  
  try {
    const dateObj = typeof date === 'string' ? parseISO(date) : date;
    const now = new Date();
    const diffMs = now - dateObj;
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è';
    if (diffDays === 1) return '–í—á–µ—Ä–∞';
    if (diffDays < 7) return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
    if (diffDays < 30) return `${Math.floor(diffDays / 7)} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
    if (diffDays < 365) return `${Math.floor(diffDays / 30)} –º–µ—Å. –Ω–∞–∑–∞–¥`;
    
    return `${Math.floor(diffDays / 365)} –≥. –Ω–∞–∑–∞–¥`;
  } catch (error) {
    return formatDate(date);
  }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
export const formatPhone = (phone) => {
  if (!phone) return '';
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
  const digits = phone.replace(/\D/g, '');
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
  const normalizedDigits = digits.startsWith('8') ? '7' + digits.slice(1) : digits;
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ +7 (XXX) XXX-XX-XX
  if (normalizedDigits.length === 11 && normalizedDigits.startsWith('7')) {
    return `+7 (${normalizedDigits.slice(1, 4)}) ${normalizedDigits.slice(4, 7)}-${normalizedDigits.slice(7, 9)}-${normalizedDigits.slice(9, 11)}`;
  }
  
  return phone;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
export const getLevelName = (level) => {
  const levels = {
    1: '–ù–æ–≤–∏—á–æ–∫',
    2: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π',
    3: '–ë—Ä–æ–Ω–∑–æ–≤—ã–π',
    4: '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π',
    5: '–ó–æ–ª–æ—Ç–æ–π'
  };
  
  return levels[level] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
export const getLevelColor = (level) => {
  const colors = {
    1: 'gray',
    2: 'blue',
    3: 'green',
    4: 'yellow',
    5: 'purple'
  };
  
  return colors[level] || 'gray';
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
export const formatPercent = (value, decimals = 1) => {
  if (!value && value !== 0) return '0%';
  return `${value.toFixed(decimals)}%`;
};

// –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
export const truncateText = (text, maxLength = 50) => {
  if (!text) return '';
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
export const formatTransactionType = (type) => {
  const types = {
    'accrual': '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ',
    'redemption': '–°–ø–∏—Å–∞–Ω–∏–µ',
    'bonus': '–ë–æ–Ω—É—Å',
    'purchase': '–ü–æ–∫—É–ø–∫–∞',
    'refund': '–í–æ–∑–≤—Ä–∞—Ç'
  };
  
  return types[type] || type;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
export const getTransactionIcon = (type) => {
  const icons = {
    'accrual': '‚ûï',
    'redemption': '‚ûñ',
    'bonus': 'üéÅ',
    'purchase': 'üõí',
    'refund': '‚Ü©Ô∏è'
  };
  
  return icons[type] || 'üí∞';
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
export const formatBookingStatus = (status) => {
  const statuses = {
    'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
    'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞',
    'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
    'no_show': '–ù–µ —è–≤–∏–ª—Å—è'
  };
  
  return statuses[status] || status;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
export const getBookingStatusColor = (status) => {
  const colors = {
    'confirmed': 'green',
    'pending': 'yellow',
    'cancelled': 'red',
    'completed': 'blue',
    'no_show': 'gray'
  };
  
  return colors[status] || 'gray';
};
