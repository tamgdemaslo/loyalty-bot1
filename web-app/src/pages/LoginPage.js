import React, { useState } from 'react';
import { Phone, User, Loader2 } from 'lucide-react';
import InputMask from 'react-input-mask';
import { authService } from '../services/api';

const LoginPage = ({ onLogin }) => {
  const [step, setStep] = useState('phone'); // 'phone' –∏–ª–∏ 'register'
  const [phone, setPhone] = useState('');
  const [name, setName] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handlePhoneSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –º–∞—Å–∫–∏
      const cleanPhone = phone.replace(/\D/g, '');
      
      if (cleanPhone.length !== 11) {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        setLoading(false);
        return;
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
      const result = await authService.loginWithPhone(cleanPhone);
      
      if (result.success && result.user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
        onLogin(result.user);
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        setStep('register');
      }
    } catch (error) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') || error.message.includes('not found')) {
        setStep('register');
      } else {
        setError(error.message);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      const cleanPhone = phone.replace(/\D/g, '');
      
      if (!name.trim()) {
        setError('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        setLoading(false);
        return;
      }

      const result = await authService.register({
        phone: cleanPhone,
        fullname: name.trim()
      });

      if (result.success && result.user) {
        onLogin(result.user);
      } else {
        setError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleBackToPhone = () => {
    setStep('phone');
    setName('');
    setError('');
  };

  return (
    <div className="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        {/* Header */}
        <div className="text-center">
          <div className="mx-auto w-20 h-20 bg-primary-600 rounded-2xl flex items-center justify-center mb-6">
            <span className="text-white text-3xl">üéØ</span>
          </div>
          <h2 className="text-3xl font-bold text-white mb-2">
            –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
          </h2>
          <p className="text-gray-200">
            {step === 'phone' 
              ? '–í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' 
              : '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ'
            }
          </p>
        </div>

        {/* Phone Form */}
        {step === 'phone' && (
          <form onSubmit={handlePhoneSubmit} className="card space-y-6">
            <div>
              <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-2">
                –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Phone className="h-5 w-5 text-gray-400" />
                </div>
                <InputMask
                  mask="+7 (999) 999-99-99"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  disabled={loading}
                  className="input pl-10"
                  placeholder="+7 (___) ___-__-__"
                  required
                />
              </div>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <p className="text-sm text-red-600">{error}</p>
              </div>
            )}

            <button
              type="submit"
              disabled={loading || !phone}
              className="btn-primary w-full flex items-center justify-center"
            >
              {loading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  –ü—Ä–æ–≤–µ—Ä—è–µ–º...
                </>
              ) : (
                '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
              )}
            </button>

            <div className="text-center">
              <p className="text-xs text-gray-500">
                –ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
              </p>
            </div>
          </form>
        )}

        {/* Registration Form */}
        {step === 'register' && (
          <form onSubmit={handleRegister} className="card space-y-6">
            <div className="text-center mb-4">
              <p className="text-sm text-gray-600">
                –¢–µ–ª–µ—Ñ–æ–Ω: <span className="font-medium">{phone}</span>
              </p>
            </div>

            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
                –í–∞—à–µ –∏–º—è
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <User className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  type="text"
                  id="name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  disabled={loading}
                  className="input pl-10"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  required
                />
              </div>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <p className="text-sm text-red-600">{error}</p>
              </div>
            )}

            <div className="space-y-3">
              <button
                type="submit"
                disabled={loading || !name.trim()}
                className="btn-primary w-full flex items-center justify-center"
              >
                {loading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç...
                  </>
                ) : (
                  '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
                )}
              </button>

              <button
                type="button"
                onClick={handleBackToPhone}
                disabled={loading}
                className="btn-secondary w-full"
              >
                –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
              </button>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
              <p className="text-sm text-blue-600">
                üéÅ –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <span className="font-medium">100 –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤!</span>
              </p>
            </div>
          </form>
        )}
      </div>
    </div>
  );
};

export default LoginPage;
