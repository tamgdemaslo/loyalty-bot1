#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ—Ç–≥—Ä—É–∑–æ–∫ –∑–∞ –≤—Å–µ –º–µ—Å—è—Ü—ã
–û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–∏–º–∏—Ç–∞–º–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –ø–æ –¥–∞—Ç–µ
"""

import sys
import os
import sqlite3
from datetime import datetime, date
from dateutil.relativedelta import relativedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞  
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from bot.moysklad import _get
    from bot.config import HEADERS
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def get_all_demands_for_month(year, month):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API
    """
    print(f"üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ {month:02d}.{year}...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞
    if month == 12:
        next_month = 1
        next_year = year + 1
    else:
        next_month = month + 1
        next_year = year
    
    start_date = f"{year}-{month:02d}-01 00:00:00"
    end_date = f"{next_year}-{next_month:02d}-01 00:00:00"
    
    all_demands = []
    offset = 0
    limit = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç API –ú–æ–π–°–∫–ª–∞–¥
    
    while True:
        try:
            params = {
                "filter": f"moment>={start_date};moment<{end_date}",
                "order": "moment,desc",
                "limit": limit,
                "offset": offset
            }
            
            response = _get("entity/demand", params)
            demands = response.get('rows', [])
            
            if not demands:
                break
                
            all_demands.extend(demands)
            print(f"  –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_demands)} –æ—Ç–≥—Ä—É–∑–æ–∫...")
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≤—Å–µ
            if len(demands) < limit:
                break
                
            offset += limit
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            break
    
    print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_demands)} –æ—Ç–≥—Ä—É–∑–æ–∫")
    return all_demands

def save_demand_to_db(demand):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º agent_id –∏–∑ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    agent = demand.get('agent', {})
    agent_meta = agent.get('meta', {})
    agent_href = agent_meta.get('href', '')
    agent_id = agent_href.split('/')[-1] if agent_href else None
    
    if not agent_id:
        return False
    
    conn = sqlite3.connect("loyalty.db")
    
    try:
        conn.execute("""
            INSERT OR REPLACE INTO contractor_shipments 
            (demand_id, agent_id, name, moment, sum, state_name, positions_count, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            demand.get('id'),
            agent_id,
            demand.get('name'),
            demand.get('moment'),
            demand.get('sum', 0),
            demand.get('state', {}).get('name', ''),
            0,  # positions_count - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            datetime.now().isoformat()
        ))
        
        conn.commit()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏ {demand.get('name')}: {e}")
        return False
        
    finally:
        conn.close()

def sync_month_shipments(year, month):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ –º–µ—Å—è—Ü
    """
    print(f"\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–≥—Ä—É–∑–æ–∫ –∑–∞ {month:02d}.{year}")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ –º–µ—Å—è—Ü
    demands = get_all_demands_for_month(year, month)
    
    if not demands:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–≥—Ä—É–∑–æ–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        return 0, 0
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    saved_count = 0
    failed_count = 0
    
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≥—Ä—É–∑–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    for i, demand in enumerate(demands, 1):
        if i % 50 == 0:
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(demands)} –æ—Ç–≥—Ä—É–∑–æ–∫...")
        
        if save_demand_to_db(demand):
            saved_count += 1
        else:
            failed_count += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    conn = sqlite3.connect("loyalty.db")
    result = conn.execute("""
        SELECT COUNT(*) as count, SUM(sum)/100.0 as total_rubles 
        FROM contractor_shipments 
        WHERE strftime('%Y-%m', moment) = ?
    """, (f"{year}-{month:02d}",)).fetchone()
    conn.close()
    
    print(f"\n‚úÖ {month:02d}.{year}: {result[0]} –æ—Ç–≥—Ä—É–∑–æ–∫, {result[1]:.2f} —Ä—É–±")
    return saved_count, failed_count

def get_months_with_shipments():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–µ—Å—è—Ü—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –æ—Ç–≥—Ä—É–∑–∫–∏ –≤ –±–∞–∑–µ
    """
    conn = sqlite3.connect("loyalty.db")
    months = conn.execute("""
        SELECT DISTINCT strftime('%Y-%m', moment) as month
        FROM contractor_shipments 
        WHERE moment IS NOT NULL
        ORDER BY month DESC
    """).fetchall()
    conn.close()
    
    return [month[0] for month in months]

def sync_all_months():
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Å—è—Ü—ã —Å –æ—Ç–≥—Ä—É–∑–∫–∞–º–∏
    """
    print("üîÑ –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–°–ï–• –û–¢–ì–†–£–ó–û–ö")
    print("=" * 80)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –í–°–ï –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ –≤—Å–µ –º–µ—Å—è—Ü—ã,")
    print("–º–∏–Ω—É—è –ª–∏–º–∏—Ç—ã –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º –∏ –∑–∞–≥—Ä—É–∂–∞—è –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ –¥–∞—Ç–µ")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã —Å –æ—Ç–≥—Ä—É–∑–∫–∞–º–∏
    months = get_months_with_shipments()
    print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(months)} –º–µ—Å—è—Ü–µ–≤ —Å –æ—Ç–≥—Ä—É–∑–∫–∞–º–∏:")
    for month in months[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        print(f"  ‚Ä¢ {month}")
    if len(months) > 10:
        print(f"  ... –∏ –µ—â–µ {len(months) - 10} –º–µ—Å—è—Ü–µ–≤")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input(f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö {len(months)} –º–µ—Å—è—Ü–µ–≤? (y/N): ")
    if response.lower() != 'y':
        print("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã
    total_saved = 0
    total_failed = 0
    
    for month_str in months:
        year, month = map(int, month_str.split('-'))
        saved, failed = sync_month_shipments(year, month)
        total_saved += saved
        total_failed += failed
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
    print("=" * 80)
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Å—è—Ü–µ–≤: {len(months)}")
    print(f"–í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ—Ç–≥—Ä—É–∑–æ–∫: {total_saved}")
    print(f"–û—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {total_failed}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–µ
    conn = sqlite3.connect("loyalty.db")
    total_result = conn.execute("""
        SELECT 
            COUNT(*) as total_count,
            SUM(sum)/100.0 as total_revenue,
            MIN(moment) as earliest_date,
            MAX(moment) as latest_date
        FROM contractor_shipments 
        WHERE moment IS NOT NULL
    """).fetchone()
    conn.close()
    
    print(f"\n–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    print(f"–í—Å–µ–≥–æ –æ—Ç–≥—Ä—É–∑–æ–∫ –≤ –±–∞–∑–µ: {total_result[0]}")
    print(f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_result[1]:.2f} —Ä—É–±")
    print(f"–ü–µ—Ä–∏–æ–¥: {total_result[2][:10]} - {total_result[3][:10]}")
    print("=" * 80)

def sync_recent_months(months_count=6):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Å—è—Ü–µ–≤
    """
    print(f"üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–û–°–õ–ï–î–ù–ò–• {months_count} –ú–ï–°–Ø–¶–ï–í")
    print("=" * 60)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã
    current_date = date.today()
    months_to_sync = []
    
    for i in range(months_count):
        month_date = current_date - relativedelta(months=i)
        months_to_sync.append((month_date.year, month_date.month))
    
    months_to_sync.reverse()  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
    
    print("–ë—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ—Å—è—Ü—ã:")
    for year, month in months_to_sync:
        print(f"  ‚Ä¢ {month:02d}.{year}")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    total_saved = 0
    total_failed = 0
    
    for year, month in months_to_sync:
        saved, failed = sync_month_shipments(year, month)
        total_saved += saved
        total_failed += failed
    
    print(f"\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"–í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {total_saved}, –æ—à–∏–±–æ–∫: {total_failed}")

if __name__ == "__main__":
    print("üîÑ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¢–û–† –û–¢–ì–†–£–ó–û–ö")
    print("=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤ (–ø–æ–ª–Ω–∞—è)")
    print("2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 –º–µ—Å—è—Ü–µ–≤")
    print("3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 12 –º–µ—Å—è—Ü–µ–≤")
    print("4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞")
    print("=" * 50)
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
    
    if choice == "1":
        sync_all_months()
    elif choice == "2":
        sync_recent_months(6)
    elif choice == "3":
        sync_recent_months(12)
    elif choice == "4":
        year = int(input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025): "))
        month = int(input("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü (1-12): "))
        sync_month_shipments(year, month)
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
