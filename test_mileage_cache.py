#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'bot'))

try:
    from bot.maintenance import (
        get_current_mileage, 
        get_cached_mileage, 
        update_mileage_cache,
        fetch_current_mileage_from_api,
        init_maintenance_tables
    )
    from bot.db import conn
    print("‚úÖ –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_cache_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫—ç—à–µ–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—ç—à–µ–º...")
    
    test_agent_id = "test_agent_123"
    test_mileage = 12345
    
    # –¢–µ—Å—Ç 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
    print(f"1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à: agent_id={test_agent_id}, mileage={test_mileage}")
    result = update_mileage_cache(test_agent_id, test_mileage)
    if result:
        print("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞")
        return False
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
    print("2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞...")
    cached_value = get_cached_mileage(test_agent_id)
    if cached_value == test_mileage:
        print(f"‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {cached_value}")
    else:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞: –æ–∂–∏–¥–∞–ª–∏ {test_mileage}, –ø–æ–ª—É—á–∏–ª–∏ {cached_value}")
        return False
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—ç—à–∞
    print("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –∫—ç—à–∞ (0 —á–∞—Å–æ–≤)...")
    expired_value = get_cached_mileage(test_agent_id, cache_hours=0)
    if expired_value is None:
        print("‚úÖ –ö—ç—à –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å—Ç–µ–∫–∞–µ—Ç")
    else:
        print(f"‚ùå –ö—ç—à –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç: –ø–æ–ª—É—á–∏–ª–∏ {expired_value}")
        return False
    
    return True

def test_get_current_mileage():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_current_mileage...")
    
    test_agent_id = "test_agent_456"
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑ –∫—ç—à–∞ (–¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å API)
    print("1. –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ –∫—ç—à–∞)...")
    start_time = time.time()
    mileage1 = get_current_mileage(test_agent_id)
    api_time = time.time() - start_time
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {mileage1}, –≤—Ä–µ–º—è: {api_time:.2f}—Å")
    
    # –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
    print("2. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ (–∏–∑ –∫—ç—à–∞)...")
    start_time = time.time()
    mileage2 = get_current_mileage(test_agent_id)
    cache_time = time.time() - start_time
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {mileage2}, –≤—Ä–µ–º—è: {cache_time:.2f}—Å")
    
    if mileage1 == mileage2:
        print("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç")
    else:
        print(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {mileage1} != {mileage2}")
        return False
    
    if cache_time < api_time:
        print(f"‚úÖ –ö—ç—à –±—ã—Å—Ç—Ä–µ–µ API: {cache_time:.2f}—Å < {api_time:.2f}—Å")
    else:
        print(f"‚ö†Ô∏è –ö—ç—à –Ω–µ –±—ã—Å—Ç—Ä–µ–µ API: {cache_time:.2f}—Å >= {api_time:.2f}—Å")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    print("3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    start_time = time.time()
    mileage3 = get_current_mileage(test_agent_id, force_update=True)
    force_time = time.time() - start_time
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {mileage3}, –≤—Ä–µ–º—è: {force_time:.2f}—Å")
    
    return True

def test_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='mileage_cache'
        """)
        table_exists = cursor.fetchone()
        
        if table_exists:
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ mileage_cache —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ mileage_cache –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(mileage_cache)")
        columns = cursor.fetchall()
        
        expected_columns = ['agent_id', 'current_mileage', 'updated_at']
        actual_columns = [col[1] for col in columns]
        
        print(f"   –°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã: {actual_columns}")
        
        for col in expected_columns:
            if col in actual_columns:
                print(f"   ‚úÖ –°—Ç–æ–ª–±–µ—Ü {col} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   ‚ùå –°—Ç–æ–ª–±–µ—Ü {col} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM mileage_cache")
        count = cursor.fetchone()[0]
        print(f"   üìä –ó–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: {count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        return False

def cleanup_test_data():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM mileage_cache WHERE agent_id LIKE 'test_agent_%'")
        deleted = cursor.rowcount
        conn.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
    print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü...")
    init_maintenance_tables()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î", test_database_structure),
        ("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫—ç—à–µ–º", test_cache_operations),
        ("–§—É–Ω–∫—Ü–∏—è get_current_mileage", test_get_current_mileage),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    cleanup_test_data()
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*50}")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == "__main__":
    sys.exit(main())
