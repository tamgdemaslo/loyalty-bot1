// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'loyalty.db');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const fs = require('fs');
if (!fs.existsSync(dbPath)) {
    console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏:', dbPath);
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
    const db = new sqlite3.Database(dbPath);
    
    db.serialize(() => {
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        db.run(`
            CREATE TABLE IF NOT EXISTS user_map (
                tg_id    INTEGER PRIMARY KEY,
                agent_id TEXT    NOT NULL,
                phone    TEXT    DEFAULT '',
                fullname TEXT    DEFAULT ''
            )
        `);
        
        db.run(`
            CREATE TABLE IF NOT EXISTS bonuses (
                agent_id TEXT PRIMARY KEY,
                balance  INTEGER NOT NULL DEFAULT 0
            )
        `);
        
        db.run(`
            CREATE TABLE IF NOT EXISTS loyalty_levels (
                agent_id TEXT PRIMARY KEY,
                level_id INTEGER NOT NULL DEFAULT 1,
                total_spent INTEGER NOT NULL DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);
        
        db.run(`
            CREATE TABLE IF NOT EXISTS bonus_transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                agent_id TEXT NOT NULL,
                transaction_type TEXT NOT NULL,
                amount INTEGER NOT NULL,
                description TEXT NOT NULL,
                related_demand_id TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        const testUsers = [
            { tg_id: 12345, agent_id: 'test_001', phone: '+7 999 123-45-67', fullname: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤' },
            { tg_id: 12346, agent_id: 'test_002', phone: '+7 999 123-45-68', fullname: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞' },
            { tg_id: 12347, agent_id: 'test_003', phone: '+7 999 123-45-69', fullname: '–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤' }
        ];
        
        testUsers.forEach(user => {
            db.run(`
                INSERT OR REPLACE INTO user_map (tg_id, agent_id, phone, fullname)
                VALUES (?, ?, ?, ?)
            `, [user.tg_id, user.agent_id, user.phone, user.fullname]);
            
            db.run(`
                INSERT OR REPLACE INTO bonuses (agent_id, balance)
                VALUES (?, ?)
            `, [user.agent_id, Math.floor(Math.random() * 5000) + 1000]);
            
            db.run(`
                INSERT OR REPLACE INTO loyalty_levels (agent_id, level_id, total_spent)
                VALUES (?, ?, ?)
            `, [user.agent_id, Math.floor(Math.random() * 5) + 1, Math.floor(Math.random() * 50000)]);
        });
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transactions = [
            { agent_id: 'test_001', type: 'accrual', amount: 500, description: '–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ' },
            { agent_id: 'test_002', type: 'redemption', amount: 200, description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ' },
            { agent_id: 'test_003', type: 'accrual', amount: 750, description: '–ë–æ–Ω—É—Å –∑–∞ –≤–∏–∑–∏—Ç' }
        ];
        
        transactions.forEach(trans => {
            db.run(`
                INSERT INTO bonus_transactions (agent_id, transaction_type, amount, description)
                VALUES (?, ?, ?, ?)
            `, [trans.agent_id, trans.type, trans.amount, trans.description]);
        });
        
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    });
    
    db.close();
} else {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞:', dbPath);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º API
async function testAPI() {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
        const adminServer = require('./admin/server.js');
        
        // –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        setTimeout(async () => {
            try {
                console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...');
                
                // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                const statsResponse = await fetch('http://localhost:3001/api/stats');
                if (statsResponse.ok) {
                    const stats = await statsResponse.json();
                    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
                    console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ API');
                }
                
            } catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
            }
            
            process.exit(0);
        }, 2000);
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (fs.existsSync(dbPath)) {
    testAPI();
} else {
    console.log('‚ö†Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
}
