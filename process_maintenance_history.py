#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¢–û
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –≤ –ú–æ–π–°–∫–ª–∞–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
"""

import sqlite3
from datetime import datetime
from bot.moysklad import fetch_demand_full
from bot.maintenance import process_moysklad_services
import logging

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

def process_all_maintenance_history():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≥—Ä—É–∑–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¢–û"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('loyalty.db')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients = conn.execute("SELECT DISTINCT agent_id FROM bonuses").fetchall()
    
    for (agent_id,) in clients:
        try:
            log.info(f"Processing maintenance history for agent: {agent_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            try:
                from bot.moysklad import fetch_shipments
                shipments = fetch_shipments(agent_id, limit=100)  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –æ—Ç–≥—Ä—É–∑–æ–∫
                
                for shipment in shipments:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≥—Ä—É–∑–∫–∏
                        demand = fetch_demand_full(shipment["id"])
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–±–µ–≥
                        mileage = 0
                        attributes = demand.get('attributes', [])
                        for attr in attributes:
                            if attr.get('name') == '–ü—Ä–æ–±–µ–≥':
                                mileage_str = str(attr.get('value', '0'))
                                mileage_clean = ''.join(filter(str.isdigit, mileage_str))
                                mileage = int(mileage_clean) if mileage_clean else 0
                                break
                        
                        if mileage == 0:
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–≥–∞
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å–ª—É–≥–∏
                        services = []
                        positions = demand.get("positions", {}).get("rows", [])
                        for p in positions:
                            if p["assortment"]["meta"]["type"] == "service":
                                services.append(p)
                        
                        if not services:
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ–∑ —É—Å–ª—É–≥
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏
                        demand_date = datetime.fromisoformat(demand["moment"].replace("Z", "+00:00")).strftime("%Y-%m-%d")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –¢–û
                        process_moysklad_services(agent_id, demand["id"], services, mileage, demand_date)
                        
                        log.info(f"Processed demand {demand['id']} with {len(services)} services, mileage: {mileage}")
                        
                    except Exception as e:
                        log.error(f"Error processing demand {shipment['id']}: {e}")
                        continue
                        
            except Exception as e:
                log.error(f"Error fetching shipments for agent {agent_id}: {e}")
                continue
                
        except Exception as e:
            log.error(f"Error processing agent {agent_id}: {e}")
            continue
    
    conn.close()
    log.info("Maintenance history processing completed!")

if __name__ == "__main__":
    print("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...")
    print("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
    try:
        process_all_maintenance_history()
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        conn = sqlite3.connect('loyalty.db')
        count = conn.execute("SELECT COUNT(*) FROM maintenance_history").fetchone()[0]
        unique_agents = conn.execute("SELECT COUNT(DISTINCT agent_id) FROM maintenance_history").fetchone()[0]
        conn.close()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –¢–û: {count}")
        print(f"   ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {unique_agents}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
