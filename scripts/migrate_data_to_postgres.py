#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
"""
import os
import sys
import sqlite3
import psycopg2
import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env.postgres
load_dotenv('../.env.postgres')

# –ü—É—Ç—å –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
SQLITE_DB_PATH = "../loyalty.db"

# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
POSTGRES_HOST = os.getenv("POSTGRES_HOST")
POSTGRES_PORT = os.getenv("POSTGRES_PORT")
POSTGRES_USER = os.getenv("POSTGRES_USER")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
POSTGRES_DB = os.getenv("POSTGRES_DB")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if not os.path.exists(SQLITE_DB_PATH):
    print(f"‚ùå SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {SQLITE_DB_PATH}")
    sys.exit(1)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
try:
    sqlite_conn = sqlite3.connect(SQLITE_DB_PATH)
    sqlite_conn.row_factory = sqlite3.Row  # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite ({SQLITE_DB_PATH})")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite: {e}")
    sys.exit(1)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
try:
    pg_conn = psycopg2.connect(
        host=POSTGRES_HOST,
        port=POSTGRES_PORT,
        user=POSTGRES_USER,
        password=POSTGRES_PASSWORD,
        dbname=POSTGRES_DB
    )
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ({POSTGRES_HOST}:{POSTGRES_PORT})")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
    sqlite_conn.close()
    sys.exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
def count_rows(conn, table_name):
    cursor = conn.cursor()
    cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
    count = cursor.fetchone()[0]
    cursor.close()
    return count

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
def migrate_table(table_name, columns, id_column=None):
    print(f"\nüìã –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
    sqlite_cursor = sqlite_conn.cursor()
    sqlite_cursor.execute(f"SELECT {', '.join(columns)} FROM {table_name}")
    rows = sqlite_cursor.fetchall()
    
    if not rows:
        print(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ PostgreSQL
    pg_cursor = pg_conn.cursor()
    
    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ PostgreSQL –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    pg_count = count_rows(pg_conn, table_name)
    if pg_count > 0:
        print(f"‚ö†Ô∏è –í PostgreSQL —É–∂–µ –µ—Å—Ç—å {pg_count} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}.")
        choice = input("–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π? (y/n): ").strip().lower()
        if choice == 'y':
            pg_cursor.execute(f"DELETE FROM {table_name}")
            print(f"üóëÔ∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –æ—á–∏—â–µ–Ω–∞.")
        else:
            print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π!")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    placeholders = ', '.join(['%s'] * len(columns))
    insert_query = f"INSERT INTO {table_name} ({', '.join(columns)}) VALUES ({placeholders})"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
    try:
        for row in rows:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç Row –≤ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
            values = [row[col] for col in columns]
            pg_cursor.execute(insert_query, values)
        
        pg_conn.commit()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")
    except Exception as e:
        pg_conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
    finally:
        pg_cursor.close()
        sqlite_cursor.close()

# –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
try:
    # 1. –¢–∞–±–ª–∏—Ü–∞ user_map
    migrate_table('user_map', ['tg_id', 'agent_id', 'phone', 'fullname'])
    
    # 2. –¢–∞–±–ª–∏—Ü–∞ bonuses
    migrate_table('bonuses', ['agent_id', 'balance'])
    
    # 3. –¢–∞–±–ª–∏—Ü–∞ accrual_log
    migrate_table('accrual_log', ['demand_id', 'processed_at'])
    
    # 4. –¢–∞–±–ª–∏—Ü–∞ loyalty_levels
    migrate_table('loyalty_levels', 
                 ['agent_id', 'level_id', 'total_spent', 'total_earned', 
                  'total_redeemed', 'created_at', 'updated_at'])
    
    # 5. –¢–∞–±–ª–∏—Ü–∞ bonus_transactions
    migrate_table('bonus_transactions', 
                 ['id', 'agent_id', 'transaction_type', 'amount', 
                  'description', 'related_demand_id', 'created_at'])
    
    # 6. –¢–∞–±–ª–∏—Ü–∞ maintenance_history
    migrate_table('maintenance_history', 
                 ['id', 'agent_id', 'work_id', 'performed_date', 'mileage', 
                  'source', 'demand_id', 'notes', 'created_at'])
    
    # 7. –¢–∞–±–ª–∏—Ü–∞ maintenance_settings
    migrate_table('maintenance_settings', 
                 ['agent_id', 'work_id', 'custom_mileage_interval', 
                  'custom_time_interval', 'is_active'])
    
    # 8. –¢–∞–±–ª–∏—Ü–∞ maintenance_service_mapping
    migrate_table('maintenance_service_mapping', 
                 ['moysklad_service_name', 'work_id', 'is_active'])
    
    # 9. –¢–∞–±–ª–∏—Ü–∞ user_achievements
    migrate_table('user_achievements', 
                 ['user_id', 'achievement_id', 'unlocked_at'])

    print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
except Exception as e:
    print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
finally:
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    sqlite_conn.close()
    pg_conn.close()
    print("üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã")
