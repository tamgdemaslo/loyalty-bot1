// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE = '/api';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUsersPage = 1;
let currentTransactionsPage = 1;
let currentSearch = '';
let activityChart = null;
let levelsChart = null;
let dailyAnalyticsChart = null;
let customerDynamicsChart = null;
let customerTypesChart = null;
let customerRevenueChart = null;

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π
async function loadCallQueuesStatus() {
    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π...');
        const response = await fetch(`${API_BASE}/call-queues/stats`);
        const data = await response.json();
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data);

        if (response.ok && data.stats) {
            updateCallQueueStats(data.stats);
            document.getElementById('queue-status').classList.remove('alert-danger');
            document.getElementById('queue-status').classList.add('alert-success');
            document.getElementById('queue-status').innerHTML = '<i class="bi bi-check-circle-fill me-2"></i><strong>–û—á–µ—Ä–µ–¥–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!</strong>';
        } else {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', data);
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π');
        }
    } catch (error) {
        console.error('Error loading queue status:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
function updateCallQueueStats(stats) {
    const queueMapping = {
        'Reactivation-High': 'reactivation',
        'Pre-TO': 'preto',
        'VIP-Frequent': 'vip',
        'Data-Poor': 'datapoor'
    };

    stats.forEach(queue => {
        const mappedName = queueMapping[queue.queue_type];
        if (mappedName) {
            const countElement = document.getElementById(`count-${mappedName}`);
            const avgElement = document.getElementById(`avg-${mappedName}`);

            if (countElement) {
                countElement.textContent = queue.count || 0;
                avgElement.textContent = `–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${Math.round((queue.avg_check || 0) / 100).toLocaleString()} ‚ÇΩ`;
            }
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    document.querySelectorAll('.queue-card').forEach(card => {
        card.onclick = function() {
            const queueType = this.dataset.queue;
            loadQueueCustomers(queueType);
        };
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
async function loadQueueCustomers(queueType) {
    const response = await fetch(`${API_BASE}/call-queues/${queueType}?page=1&limit=20`);
    if (response.ok) {
        const data = await response.json();
        renderQueueCustomers(data.customers, queueType);
    } else {
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—á–µ—Ä–µ–¥–∏');
    }
}

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
function renderQueueCustomers(customers, queueType) {
    document.getElementById('selected-queue-name').textContent = queueType;
    document.getElementById('queue-customers-section').style.display = 'block';
    document.querySelector('#call-queues-section .row').style.display = 'none';
    document.querySelector('#call-queues-section .card.mt-4').style.display = 'none';
    
    const tbody = document.getElementById('queue-customers-table');
    if (customers.length === 0) {
        tbody.innerHTML = '<tr><td colspan="8" class="text-center">–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏</td></tr>';
        return;
    }
    
    tbody.innerHTML = customers.map(customer => `
        <tr>
            <td>${customer.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
            <td>${customer.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
            <td>${Math.round((customer.avg_check || 0) / 100).toLocaleString()} ‚ÇΩ</td>
            <td>${Math.round((customer.total_revenue || 0) / 100).toLocaleString()} ‚ÇΩ</td>
            <td>${customer.recency_days || 0} –¥–Ω–µ–π</td>
            <td>${Math.round(customer.bonus_balance || 0).toLocaleString()}</td>
            <td>${customer.last_contact ? new Date(customer.last_contact).toLocaleDateString('ru-RU') : '–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'}</td>
            <td>
                <button class="btn btn-sm btn-outline-primary" onclick="addContact('${customer.agent_id}')">üìû –ó–≤–æ–Ω–æ–∫</button>
                <button class="btn btn-sm btn-outline-info ms-1" onclick="showClientModal('${customer.agent_id}')">üëÅ –î–µ—Ç–∞–ª–∏</button>
                <button class="btn btn-sm btn-outline-warning ms-1" onclick="showPersonalMessageModal('${customer.agent_id}', '${customer.name || '–ö–ª–∏–µ–Ω—Ç'}')">üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ</button>
            </td>
        </tr>
    `).join('');
}

// –°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
function hideQueueCustomers() {
    document.getElementById('queue-customers-section').style.display = 'none';
    document.querySelector('#call-queues-section .row').style.display = 'flex';
    document.querySelector('#call-queues-section .card.mt-4').style.display = 'block';
}

// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
async function addContact(agentId) {
    const result = prompt('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞:\n1 - –£—Å–ø–µ—à–Ω–æ\n2 - –ù–µ –æ—Ç–≤–µ—Ç–∏–ª\n3 - –ù–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω\n4 - –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –ø–æ–∑–∂–µ');
    
    const resultMap = {
        '1': 'success',
        '2': 'no_answer',
        '3': 'not_interested',
        '4': 'callback'
    };
    
    const contactResult = resultMap[result];
    if (!contactResult) return;
    
    const notes = prompt('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–≤–æ–Ω–∫—É:');
    
    try {
        const response = await fetch(`${API_BASE}/call-queues/contact`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                agent_id: agentId,
                contact_type: 'call',
                result: contactResult,
                notes: notes || ''
            })
        });
        
        if (response.ok) {
            showSuccess('–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
            const queueType = document.getElementById('selected-queue-name').textContent;
            loadQueueCustomers(queueType);
        } else {
            showError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
        }
    } catch (error) {
        console.error('Error adding contact:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}
document.addEventListener('DOMContentLoaded', function() {
    loadDashboard();
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏
function showSection(sectionName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    const sections = ['dashboard', 'users', 'transactions', 'analytics', 'call-queues', 'customer-analytics'];
    sections.forEach(section => {
        const element = document.getElementById(section + '-section');
        if (element) {
            element.style.display = 'none';
        }
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    const targetSection = document.getElementById(sectionName + '-section');
    if (targetSection) {
        targetSection.style.display = 'block';
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
    document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
    });
    event.target.classList.add('active');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
    switch(sectionName) {
        case 'dashboard':
            loadDashboard();
            break;
        case 'users':
            loadUsers();
            break;
        case 'transactions':
            loadTransactions();
            break;
        case 'analytics':
            loadAnalytics();
            break;
        case 'call-queues':
            loadCallQueuesStatus();
            break;
        case 'customer-analytics':
            loadCustomerAnalytics();
            break;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
function updateCallQueues() {
    document.getElementById('refresh-icon').classList.add('bi-spin');
    fetch(`${API_BASE}/call-queues/refresh`, { method: 'POST' })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('–û—á–µ—Ä–µ–¥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                loadCallQueuesStatus();
            } else {
                alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π');
            }
        })
        .finally(() => {
            document.getElementById('refresh-icon').classList.remove('bi-spin');
        });
}

async function loadDashboard() {
    try {
        const response = await fetch(`${API_BASE}/stats`);
        const stats = await response.json();
        
        if (response.ok) {
            renderStatsCards(stats);
            renderLevelsChart(stats.levelDistribution || []);
            loadActivityChart();
        } else {
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    } catch (error) {
        console.error('Error loading dashboard:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
function renderStatsCards(stats) {
    const cardsHtml = `
        <div class="col-md-3">
            <div class="card stats-card text-center">
                <div class="card-body">
                    <i class="bi bi-people fs-1 text-primary mb-2"></i>
                    <h5 class="card-title">${stats.totalUsers || 0}</h5>
                    <p class="card-text text-muted">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card text-center">
                <div class="card-body">
                    <i class="bi bi-currency-dollar fs-1 text-success mb-2"></i>
                    <h5 class="card-title">${(stats.totalBalance || 0).toLocaleString()}</h5>
                    <p class="card-text text-muted">–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card text-center">
                <div class="card-body">
                    <i class="bi bi-receipt fs-1 text-info mb-2"></i>
                    <h5 class="card-title">${stats.totalTransactions || 0}</h5>
                    <p class="card-text text-muted">–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card text-center">
                <div class="card-body">
                    <i class="bi bi-graph-up fs-1 text-warning mb-2"></i>
                    <h5 class="card-title">${(stats.totalSpent || 0).toLocaleString()}</h5>
                    <p class="card-text text-muted">–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç</p>
                </div>
            </div>
        </div>
    `;
    
    document.getElementById('stats-cards').innerHTML = cardsHtml;
}

// –ì—Ä–∞—Ñ–∏–∫ —É—Ä–æ–≤–Ω–µ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
function renderLevelsChart(levelData) {
    const ctx = document.getElementById('levelsChart').getContext('2d');
    
    if (levelsChart) {
        levelsChart.destroy();
    }

    const levelNames = {
        1: '–ù–æ–≤–∏—á–æ–∫',
        2: '–ë—Ä–æ–Ω–∑–æ–≤—ã–π',
        3: '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π',
        4: '–ó–æ–ª–æ—Ç–æ–π',
        5: '–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π'
    };

    const labels = levelData.map(item => levelNames[item.level_id] || `–£—Ä–æ–≤–µ–Ω—å ${item.level_id}`);
    const data = levelData.map(item => item.count);
    const colors = ['#6c757d', '#28a745', '#ffc107', '#fd7e14', '#dc3545'];

    levelsChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: data,
                backgroundColor: colors.slice(0, data.length),
                borderWidth: 2,
                borderColor: '#fff'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
}

// –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function loadActivityChart() {
    try {
        const response = await fetch(`${API_BASE}/analytics/daily?days=30`);
        const data = await response.json();
        
        if (response.ok) {
            renderActivityChart(data);
        }
    } catch (error) {
        console.error('Error loading activity chart:', error);
    }
}

function renderActivityChart(data) {
    const ctx = document.getElementById('activityChart').getContext('2d');
    
    if (activityChart) {
        activityChart.destroy();
    }

    const dates = data.map(item => new Date(item.date).toLocaleDateString('ru-RU'));
    const accrualData = data.map(item => item.accrual.count);
    const redemptionData = data.map(item => item.redemption.count);

    activityChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: dates.reverse(),
            datasets: [
                {
                    label: '–ù–∞—á–∏—Å–ª–µ–Ω–∏—è',
                    data: accrualData.reverse(),
                    borderColor: '#28a745',
                    backgroundColor: 'rgba(40, 167, 69, 0.1)',
                    tension: 0.4
                },
                {
                    label: '–°–ø–∏—Å–∞–Ω–∏—è',
                    data: redemptionData.reverse(),
                    borderColor: '#dc3545',
                    backgroundColor: 'rgba(220, 53, 69, 0.1)',
                    tension: 0.4
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers(page = 1, search = '') {
    currentUsersPage = page;
    currentSearch = search;

    try {
        const params = new URLSearchParams({
            page: page,
            limit: 20
        });
        
        if (search) {
            params.append('search', search);
        }

        const response = await fetch(`${API_BASE}/users?${params}`);
        const data = await response.json();
        
        if (response.ok) {
            renderUsersTable(data.users);
            renderPagination('usersPagination', data.pagination, loadUsers);
        } else {
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }
    } catch (error) {
        console.error('Error loading users:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function renderUsersTable(users) {
    const tbody = document.getElementById('usersTable');
    
    if (users.length === 0) {
        tbody.innerHTML = '<tr><td colspan="8" class="text-center">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        return;
    }

    const levelNames = {
        1: '–ù–æ–≤–∏—á–æ–∫',
        2: '–ë—Ä–æ–Ω–∑–æ–≤—ã–π',
        3: '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π',
        4: '–ó–æ–ª–æ—Ç–æ–π',
        5: '–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π'
    };

    tbody.innerHTML = users.map(user => `
        <tr>
            <td>${user.tg_id}</td>
            <td>${user.fullname || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
            <td>${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
            <td>${user.balance.toLocaleString()}</td>
            <td><span class="level-badge level-${user.level_id}">${levelNames[user.level_id]}</span></td>
            <td>${user.total_spent.toLocaleString()}</td>
            <td>${user.registered_at ? new Date(user.registered_at).toLocaleDateString('ru-RU') : '–ù/–î'}</td>
            <td>
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-primary btn-action" onclick="editBalance('${user.agent_id}', ${user.balance})">
                        <i class="bi bi-cash"></i>
                    </button>
                    <button class="btn btn-outline-secondary btn-action" onclick="editLevel('${user.agent_id}', ${user.level_id})">
                        <i class="bi bi-award"></i>
                    </button>
                </div>
            </td>
        </tr>
    `).join('');
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function searchUsers() {
    const search = document.getElementById('userSearch').value;
    loadUsers(1, search);
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
function editBalance(agentId, currentBalance) {
    document.getElementById('balanceAgentId').value = agentId;
    document.getElementById('balanceAmount').value = '';
    document.getElementById('balanceDescription').value = '';
    
    const modal = new bootstrap.Modal(document.getElementById('balanceModal'));
    modal.show();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async function submitBalanceChange() {
    const agentId = document.getElementById('balanceAgentId').value;
    const amount = parseInt(document.getElementById('balanceAmount').value);
    const description = document.getElementById('balanceDescription').value;

    if (!amount || !description) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }

    try {
        const response = await fetch(`${API_BASE}/users/${agentId}/balance`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ amount, description })
        });

        const result = await response.json();

        if (response.ok) {
            showSuccess('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
            bootstrap.Modal.getInstance(document.getElementById('balanceModal')).hide();
            loadUsers(currentUsersPage, currentSearch);
        } else {
            showError(result.error || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
        }
    } catch (error) {
        console.error('Error updating balance:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
function editLevel(agentId, currentLevel) {
    document.getElementById('levelAgentId').value = agentId;
    document.getElementById('levelId').value = currentLevel;
    
    const modal = new bootstrap.Modal(document.getElementById('levelModal'));
    modal.show();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
async function submitLevelChange() {
    const agentId = document.getElementById('levelAgentId').value;
    const levelId = parseInt(document.getElementById('levelId').value);

    try {
        const response = await fetch(`${API_BASE}/users/${agentId}/level`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ levelId })
        });

        const result = await response.json();

        if (response.ok) {
            showSuccess('–£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
            bootstrap.Modal.getInstance(document.getElementById('levelModal')).hide();
            loadUsers(currentUsersPage, currentSearch);
        } else {
            showError(result.error || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è');
        }
    } catch (error) {
        console.error('Error updating level:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function loadTransactions(page = 1) {
    currentTransactionsPage = page;

    try {
        const type = document.getElementById('transactionType')?.value || '';
        const params = new URLSearchParams({
            page: page,
            limit: 50
        });
        
        if (type) {
            params.append('type', type);
        }

        const response = await fetch(`${API_BASE}/transactions?${params}`);
        const data = await response.json();
        
        if (response.ok) {
            renderTransactionsTable(data.transactions);
            renderPagination('transactionsPagination', data.pagination, loadTransactions);
        } else {
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
        }
    } catch (error) {
        console.error('Error loading transactions:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function renderTransactionsTable(transactions) {
    const tbody = document.getElementById('transactionsTable');
    
    if (transactions.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        return;
    }

    tbody.innerHTML = transactions.map(transaction => `
        <tr>
            <td>${transaction.id}</td>
            <td>
                ${transaction.fullname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}<br>
                <small class="text-muted">${transaction.phone || transaction.agent_id}</small>
            </td>
            <td>
                <span class="badge ${transaction.transaction_type === 'accrual' ? 'bg-success' : 'bg-danger'}">
                    ${transaction.transaction_type === 'accrual' ? '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ' : '–°–ø–∏—Å–∞–Ω–∏–µ'}
                </span>
            </td>
            <td>${transaction.amount.toLocaleString()}</td>
            <td>${transaction.description}</td>
            <td>${new Date(transaction.created_at).toLocaleString('ru-RU')}</td>
        </tr>
    `).join('');
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function filterTransactions() {
    loadTransactions(1);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async function loadAnalytics() {
    const days = document.getElementById('analyticsPeriod')?.value || 30;
    
    try {
        const response = await fetch(`${API_BASE}/analytics/daily?days=${days}`);
        const data = await response.json();
        
        if (response.ok) {
            renderDailyAnalyticsChart(data);
        } else {
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
        }
    } catch (error) {
        console.error('Error loading analytics:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –ì—Ä–∞—Ñ–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
function renderDailyAnalyticsChart(data) {
    const ctx = document.getElementById('dailyAnalyticsChart').getContext('2d');
    
    if (dailyAnalyticsChart) {
        dailyAnalyticsChart.destroy();
    }

    const dates = data.map(item => new Date(item.date).toLocaleDateString('ru-RU'));
    const accrualAmounts = data.map(item => item.accrual.amount);
    const redemptionAmounts = data.map(item => item.redemption.amount);

    dailyAnalyticsChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: dates.reverse(),
            datasets: [
                {
                    label: '–ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤',
                    data: accrualAmounts.reverse(),
                    backgroundColor: 'rgba(40, 167, 69, 0.8)',
                    borderColor: '#28a745',
                    borderWidth: 1
                },
                {
                    label: '–°–ø–∏—Å–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤',
                    data: redemptionAmounts.reverse(),
                    backgroundColor: 'rgba(220, 53, 69, 0.8)',
                    borderColor: '#dc3545',
                    borderWidth: 1
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function exportUsers() {
    window.open(`${API_BASE}/export/users`, '_blank');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
async function loadCustomerAnalytics() {
    const months = document.getElementById('customerAnalyticsPeriod')?.value || 12;
    
    try {
        const response = await fetch(`${API_BASE}/analytics/customers-monthly?months=${months}`);
        const data = await response.json();
        
        if (response.ok) {
            renderCustomerAnalytics(data);
        } else {
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤');
        }
    } catch (error) {
        console.error('Error loading customer analytics:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
function renderCustomerAnalytics(data) {
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    document.getElementById('customer-summary-cards').innerHTML = '';
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    const months = data.monthly_analytics.map(item => item.month);
    const newCustomers = data.monthly_analytics.map(item => item.new_customers);
    const existingCustomers = data.monthly_analytics.map(item => item.existing_customers);
    const newRevenue = data.monthly_analytics.map(item => item.new_customers_revenue);
    const existingRevenue = data.monthly_analytics.map(item => item.existing_customers_revenue);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    const ctxDynamics = document.getElementById('customerDynamicsChart').getContext('2d');
    if (customerDynamicsChart) {
        customerDynamicsChart.destroy();
    }
    customerDynamicsChart = new Chart(ctxDynamics, {
        type: 'line',
        data: {
            labels: months.reverse(),
            datasets: [
                {
                    label: '–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
                    data: newCustomers.reverse(),
                    borderColor: '#007bff',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    tension: 0.4
                },
                {
                    label: '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã',
                    data: existingCustomers.reverse(),
                    borderColor: '#ffc107',
                    backgroundColor: 'rgba(255, 193, 7, 0.1)',
                    tension: 0.4
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏
    const ctxRevenue = document.getElementById('customerRevenueChart').getContext('2d');
    if (customerRevenueChart) {
        customerRevenueChart.destroy();
    }
    customerRevenueChart = new Chart(ctxRevenue, {
        type: 'bar',
        data: {
            labels: months.reverse(),
            datasets: [
                {
                    label: '–í—ã—Ä—É—á–∫–∞ –æ—Ç –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
                    data: newRevenue.reverse(),
                    backgroundColor: 'rgba(0, 123, 255, 0.8)',
                    borderColor: '#007bff',
                    borderWidth: 1
                },
                {
                    label: '–í—ã—Ä—É—á–∫–∞ –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
                    data: existingRevenue.reverse(),
                    backgroundColor: 'rgba(255, 193, 7, 0.8)',
                    borderColor: '#ffc107',
                    borderWidth: 1
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
    const tbody = document.getElementById('customerAnalyticsTable');
    tbody.innerHTML = data.monthly_analytics.map(item => `
        <tr>
            <td>${item.month}</td>
            <td>${item.new_customers}</td>
            <td>${item.new_customers_revenue.toLocaleString()} ‚ÇΩ</td>
            <td>${item.existing_customers}</td>
            <td>${item.existing_customers_revenue.toLocaleString()} ‚ÇΩ</td>
            <td>${item.new_customers + item.existing_customers}</td>
            <td>${(item.new_customers_revenue + item.existing_customers_revenue).toLocaleString()} ‚ÇΩ</td>
            <td>${((item.new_customers / (item.new_customers + item.existing_customers)) * 100).toFixed(1)}%</td>
        </tr>
    `).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
function renderPagination(containerId, pagination, loadFunction) {
    const container = document.getElementById(containerId);
    
    if (!container || pagination.pages <= 1) {
        container.innerHTML = '';
        return;
    }

    let paginationHtml = '';
    
    // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (pagination.page > 1) {
        paginationHtml += `
            <li class="page-item">
                <a class="page-link" href="#" onclick="${loadFunction.name}(${pagination.page - 1}); return false;">–ù–∞–∑–∞–¥</a>
            </li>
        `;
    }

    // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    const startPage = Math.max(1, pagination.page - 2);
    const endPage = Math.min(pagination.pages, pagination.page + 2);

    for (let i = startPage; i <= endPage; i++) {
        paginationHtml += `
            <li class="page-item ${i === pagination.page ? 'active' : ''}">
                <a class="page-link" href="#" onclick="${loadFunction.name}(${i}); return false;">${i}</a>
            </li>
        `;
    }

    // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (pagination.page < pagination.pages) {
        paginationHtml += `
            <li class="page-item">
                <a class="page-link" href="#" onclick="${loadFunction.name}(${pagination.page + 1}); return false;">–í–ø–µ—Ä–µ–¥</a>
            </li>
        `;
    }

    container.innerHTML = paginationHtml;
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showSuccess(message) {
    showToast(message, 'success');
}

function showError(message) {
    showToast(message, 'danger');
}

function showToast(message, type) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'toast-container';
        toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
        toastContainer.style.zIndex = '9999';
        document.body.appendChild(toastContainer);
    }

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç toast
    const toastElement = document.createElement('div');
    toastElement.className = `toast align-items-center text-white bg-${type} border-0`;
    toastElement.setAttribute('role', 'alert');
    toastElement.setAttribute('aria-live', 'assertive');
    toastElement.setAttribute('aria-atomic', 'true');
    
    toastElement.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;

    toastContainer.appendChild(toastElement);

    try {
        const toast = new bootstrap.Toast(toastElement);
        toast.show();

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è
        toastElement.addEventListener('hidden.bs.toast', function() {
            if (this.parentNode) {
                this.parentNode.removeChild(this);
            }
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (toastElement.parentNode) {
                toast.hide();
            }
        }, 5000);
    } catch (error) {
        console.error('Error creating toast notification:', error);
        // Fallback: –ø—Ä–æ—Å—Ç–æ–µ alert
        alert(message);
        if (toastElement.parentNode) {
            toastElement.parentNode.removeChild(toastElement);
        }
    }
}

// =============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ß–ï–†–ï–î–ï–ô –û–ë–ó–í–û–ù–ê
// =============================================================================

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –æ–±–∑–≤–æ–Ω–∞
async function updateCallQueues() {
    const button = document.querySelector('button[onclick="updateCallQueues()"]');
    if (!button) return;
    
    const originalText = button.innerHTML;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    button.innerHTML = '<i class="bi bi-arrow-repeat spin me-2"></i>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
    button.disabled = true;
    
    try {
        console.log('–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π...');
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        console.log('–û—á–µ—Ä–µ–¥–∏ –æ–±–∑–≤–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await loadCallQueuesStatus();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        setTimeout(() => {
            showSuccess('–û—á–µ—Ä–µ–¥–∏ –æ–±–∑–≤–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
        }, 100);
        
    } catch (error) {
        console.error('Error updating call queues:', error);
        setTimeout(() => {
            showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π');
        }, 100);
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        button.innerHTML = originalText;
        button.disabled = false;
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è
const style = document.createElement('style');
style.textContent = `
    .spin {
        animation: spin 1s linear infinite;
    }
    @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
`;
document.head.appendChild(style);

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É –∫–ª–∏–µ–Ω—Ç–∞
function showClientModal(agentId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ client-modal.js
    if (typeof window.showClientDetailsModal === 'function') {
        window.showClientDetailsModal(agentId);
    } else {
        // –ï—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        window.open(`/client.html?agent_id=${agentId}`, '_blank');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
document.addEventListener('DOMContentLoaded', function() {
    const userSearch = document.getElementById('userSearch');
    if (userSearch) {
        userSearch.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchUsers();
            }
        });
    }
});

// =============================================================================
// –§–£–ù–ö–¶–ò–ò –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø
// =============================================================================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞
let forecastCustomersChart = null;
let forecastRevenueChart = null;

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
async function loadForecast() {
    const months = document.getElementById('forecast-months').value;

    try {
        const response = await fetch(`${API_BASE}/analytics/customers-forecast?months=${months}`);
        const data = await response.json();

        if (response.ok) {
            renderForecast(data);
        } else {
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤');
        }
    } catch (error) {
        console.error('Error loading forecast:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
function renderForecast(data) {
    if (data.error) {
        showError(data.error);
        return;
    }

    const forecastInfo = document.getElementById('forecast-info');
    const forecastCharts = document.getElementById('forecast-charts');
    const forecastTableBody = document.getElementById('forecastTableBody');

    document.getElementById('forecast-algorithm').textContent = data.algorithm;
    forecastInfo.style.display = 'block';
    forecastCharts.style.display = 'block';

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    const forecastMonths = data.forecast.map(item => item.month);
    const newForecastCustomers = data.forecast.map(item => item.new_customers);
    const existingForecastCustomers = data.forecast.map(item => item.existing_customers);
    const newForecastRevenue = data.forecast.map(item => item.new_customers_revenue);
    const existingForecastRevenue = data.forecast.map(item => item.existing_customers_revenue);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞
    const ctxForecastCustomers = document.getElementById('forecast-customers-chart').getContext('2d');
    if (forecastCustomersChart) {
        forecastCustomersChart.destroy();
    }
    forecastCustomersChart = new Chart(ctxForecastCustomers, {
        type: 'line',
        data: {
            labels: forecastMonths,
            datasets: [
                {
                    label: '–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
                    data: newForecastCustomers,
                    borderColor: '#007bff',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    tension: 0.4
                },
                {
                    label: '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã',
                    data: existingForecastCustomers,
                    borderColor: '#ffc107',
                    backgroundColor: 'rgba(255, 193, 7, 0.1)',
                    tension: 0.4
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    const ctxForecastRevenue = document.getElementById('forecast-revenue-chart').getContext('2d');
    if (forecastRevenueChart) {
        forecastRevenueChart.destroy();
    }
    forecastRevenueChart = new Chart(ctxForecastRevenue, {
        type: 'bar',
        data: {
            labels: forecastMonths,
            datasets: [
                {
                    label: '–í—ã—Ä—É—á–∫–∞ –æ—Ç –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
                    data: newForecastRevenue,
                    backgroundColor: 'rgba(0, 123, 255, 0.8)',
                    borderColor: '#007bff',
                    borderWidth: 1
                },
                {
                    label: '–í—ã—Ä—É—á–∫–∞ –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
                    data: existingForecastRevenue,
                    backgroundColor: 'rgba(255, 193, 7, 0.8)',
                    borderColor: '#ffc107',
                    borderWidth: 1
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
    forecastTableBody.innerHTML = data.forecast.map(row => `
        <tr>
            <td>${row.month}</td>
            <td>${row.new_customers}</td>
            <td>${row.new_customers_revenue.toLocaleString()}</td>
            <td>${row.existing_customers}</td>
            <td>${row.existing_customers_revenue.toLocaleString()}</td>
            <td>${row.total_customers}</td>
            <td>${row.total_revenue.toLocaleString()}</td>
            <td>${(row.confidence * 100).toFixed(1)}%</td>
        </tr>
    `).join('');
}

// =============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù –°–û–û–ë–©–ï–ù–ò–ô
// =============================================================================

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
function showQueueBroadcastModal() {
    const queueType = document.getElementById('selected-queue-name').textContent;
    if (!queueType) {
        showError('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('broadcastMessage').value = '';
    document.getElementById('channelTelegram').checked = true;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('broadcast-queue-name').textContent = queueType;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = new bootstrap.Modal(document.getElementById('queueBroadcastModal'));
    modal.show();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
function showBulkMessageModal() {
    const queueType = document.getElementById('selected-queue-name').textContent;
    if (!queueType) {
        showError('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('bulkMessage').value = '';
    document.getElementById('bulkChannel').value = 'telegram';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('bulkMessageQueueName').textContent = queueType;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = new bootstrap.Modal(document.getElementById('bulkMessageModal'));
    modal.show();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function showPersonalMessageModal(agentId, customerName) {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞
    document.getElementById('personalAgentId').value = agentId;
    document.getElementById('personalMessage').value = '';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª Telegram –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const telegramRadio = document.getElementById('personalTelegram');
    if (telegramRadio) {
        telegramRadio.checked = true;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('personal-client-name').textContent = customerName;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = new bootstrap.Modal(document.getElementById('personalMessageModal'));
    modal.show();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏
async function sendQueueBroadcast() {
    const message = document.getElementById('broadcastMessage').value.trim();
    const queueType = document.getElementById('selected-queue-name').textContent;
    const channelTelegram = document.getElementById('channelTelegram').checked;
    
    if (!message) {
        showError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
    }
    
    if (!queueType) {
        showError('–û—á–µ—Ä–µ–¥—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const sendButton = document.getElementById('sendBroadcastBtn');
    const loadingDiv = document.getElementById('broadcast-loading');
    const resultDiv = document.getElementById('broadcast-result');
    
    sendButton.style.display = 'none';
    loadingDiv.style.display = 'block';
    resultDiv.style.display = 'none';
    
    try {
        const response = await fetch(`${API_BASE}/messages/bulk`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                queue_type: queueType,
                message: message,
                channel: channelTelegram ? 'telegram' : 'other'
            })
        });
        
        const result = await response.json();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loadingDiv.style.display = 'none';
        
        if (response.ok) {
            resultDiv.innerHTML = `
                <div class="alert alert-success">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.sent_count || 0} –∫–ª–∏–µ–Ω—Ç–∞–º!
                </div>
            `;
            resultDiv.style.display = 'block';
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                bootstrap.Modal.getInstance(document.getElementById('queueBroadcastModal')).hide();
            }, 2000);
        } else {
            resultDiv.innerHTML = `
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    –û—à–∏–±–∫–∞: ${result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'}
                </div>
            `;
            resultDiv.style.display = 'block';
            sendButton.style.display = 'inline-block';
        }
    } catch (error) {
        console.error('Error sending queue broadcast:', error);
        loadingDiv.style.display = 'none';
        resultDiv.innerHTML = `
            <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            </div>
        `;
        resultDiv.style.display = 'block';
        sendButton.style.display = 'inline-block';
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendBulkMessage() {
    const message = document.getElementById('bulkMessage').value.trim();
    const channel = document.getElementById('bulkChannel').value;
    const queueType = document.getElementById('selected-queue-name').textContent;
    
    if (!message) {
        showError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
    }
    
    if (!queueType) {
        showError('–û—á–µ—Ä–µ–¥—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const sendButton = document.querySelector('#bulkMessageModal .btn-primary');
    const originalText = sendButton.innerHTML;
    sendButton.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
    sendButton.disabled = true;
    
    try {
        const response = await fetch(`${API_BASE}/messages/bulk`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                queue_type: queueType,
                message: message,
                channel: channel
            })
        });
        
        const result = await response.json();
        
        if (response.ok) {
            showSuccess(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.sent_count || 0} –∫–ª–∏–µ–Ω—Ç–∞–º`);
            bootstrap.Modal.getInstance(document.getElementById('bulkMessageModal')).hide();
        } else {
            showError(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('Error sending bulk message:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        sendButton.innerHTML = originalText;
        sendButton.disabled = false;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendPersonalMessage() {
    const agentId = document.getElementById('personalAgentId').value;
    const message = document.getElementById('personalMessage').value.trim();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
    const channelRadio = document.querySelector('input[name="personalChannel"]:checked');
    const channel = channelRadio ? channelRadio.value : 'telegram';
    
    if (!message) {
        showError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
    }
    
    if (!agentId) {
        showError('ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const sendButton = document.querySelector('#personalMessageModal .btn-primary');
    const originalText = sendButton.innerHTML;
    sendButton.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
    sendButton.disabled = true;
    
    try {
        const response = await fetch(`${API_BASE}/messages/personal`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                agent_id: agentId,
                message: message,
                channel: channel
            })
        });
        
        const result = await response.json();
        
        if (response.ok) {
            showSuccess('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            bootstrap.Modal.getInstance(document.getElementById('personalMessageModal')).hide();
        } else {
            showError(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('Error sending personal message:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        sendButton.innerHTML = originalText;
        sendButton.disabled = false;
    }
}
