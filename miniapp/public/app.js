// Telegram Mini App - –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
class LoyaltyApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.userData = null;
        this.currentPage = 'dashboard';
        this.bookingData = {};
        
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        this.tg.ready();
        this.tg.expand();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        this.userData = this.tg.initDataUnsafe?.user;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.loadUserData();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        this.applyTelegramTheme();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        this.showMainApp();
    }

    applyTelegramTheme() {
        const root = document.documentElement;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã Telegram
        if (this.tg.themeParams) {
            const theme = this.tg.themeParams;
            
            if (theme.bg_color) root.style.setProperty('--tg-theme-bg-color', theme.bg_color);
            if (theme.text_color) root.style.setProperty('--tg-theme-text-color', theme.text_color);
            if (theme.hint_color) root.style.setProperty('--tg-theme-hint-color', theme.hint_color);
            if (theme.link_color) root.style.setProperty('--tg-theme-link-color', theme.link_color);
            if (theme.button_color) root.style.setProperty('--tg-theme-button-color', theme.button_color);
            if (theme.button_text_color) root.style.setProperty('--tg-theme-button-text-color', theme.button_text_color);
            if (theme.secondary_bg_color) root.style.setProperty('--tg-theme-secondary-bg-color', theme.secondary_bg_color);
        }
    }

    async loadUserData() {
        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤
            await this.sleep(1500);
            
            // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
            this.userLoyaltyData = {
                balance: 2450,
                level: 'Silver',
                totalSpent: 75000,
                totalEarned: 5420,
                totalRedeemed: 2970,
                totalVisits: 12,
                phone: this.userData?.phone_number || '+7 XXX XXX-XX-XX',
                name: this.userData?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                registeredDate: '2023-05-15'
            };
            
            this.updateUserInterface();
            
        } catch (error) {
            console.error('Error loading user data:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    updateUserInterface() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        document.getElementById('user-name').textContent = this.userLoyaltyData.name;
        document.getElementById('user-status').textContent = `–°—Ç–∞—Ç—É—Å: ${this.userLoyaltyData.level}`;
        document.getElementById('balance-amount').textContent = this.formatMoney(this.userLoyaltyData.balance);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        this.updateLoyaltyCard();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        this.updateProfileData();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        this.loadRecentTransactions();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π
        this.loadVisitHistory();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¢–û
        this.loadMaintenanceData();
    }

    updateLoyaltyCard() {
        const levelBadge = document.getElementById('level-badge');
        const progressFill = document.getElementById('progress-fill');
        const currentSpent = document.getElementById('current-spent');
        const nextLevelReq = document.getElementById('next-level-requirement');
        
        levelBadge.textContent = this.userLoyaltyData.level;
        levelBadge.className = `level-badge ${this.userLoyaltyData.level}`;
        
        currentSpent.textContent = this.formatMoney(this.userLoyaltyData.totalSpent);
        
        const levels = {
            'Bronze': { next: 'Silver', requirement: 50000 },
            'Silver': { next: 'Gold', requirement: 150000 },
            'Gold': { next: 'Platinum', requirement: 300000 },
            'Platinum': { next: 'VIP', requirement: 500000 },
            'VIP': { next: null, requirement: null }
        };
        
        const currentLevel = levels[this.userLoyaltyData.level];
        if (currentLevel.next) {
            const progress = (this.userLoyaltyData.totalSpent / currentLevel.requirement) * 100;
            progressFill.style.width = `${Math.min(progress, 100)}%`;
            
            const remaining = currentLevel.requirement - this.userLoyaltyData.totalSpent;
            nextLevelReq.textContent = `–¥–æ ${currentLevel.next}: ${this.formatMoney(remaining)}`;
        } else {
            progressFill.style.width = '100%';
            nextLevelReq.textContent = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
        }
    }

    updateProfileData() {
        document.getElementById('profile-name').textContent = this.userLoyaltyData.name;
        document.getElementById('profile-phone').textContent = this.userLoyaltyData.phone;
        document.getElementById('profile-registered').textContent = this.formatDate(this.userLoyaltyData.registeredDate);
        
        document.getElementById('total-visits').textContent = this.userLoyaltyData.totalVisits;
        document.getElementById('total-spent').textContent = this.formatMoney(this.userLoyaltyData.totalSpent);
        document.getElementById('total-earned').textContent = this.formatMoney(this.userLoyaltyData.totalEarned);
        document.getElementById('total-redeemed').textContent = this.formatMoney(this.userLoyaltyData.totalRedeemed);
    }

    loadRecentTransactions() {
        const container = document.getElementById('recent-transactions');
        
        // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const transactions = [
            { type: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –≤–∏–∑–∏—Ç', amount: 450, date: '2024-01-20', positive: true },
            { type: '–°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤', amount: -320, date: '2024-01-18', positive: false },
            { type: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –≤–∏–∑–∏—Ç', amount: 680, date: '2024-01-15', positive: true }
        ];
        
        container.innerHTML = '';
        
        if (transactions.length === 0) {
            container.innerHTML = '<p style="text-align: center; color: var(--tg-theme-hint-color);">–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</p>';
            return;
        }
        
        transactions.forEach(transaction => {
            const item = document.createElement('div');
            item.className = 'transaction-item';
            
            item.innerHTML = `
                <div class="transaction-info">
                    <div class="transaction-type">${transaction.type}</div>
                    <div class="transaction-date">${this.formatDate(transaction.date)}</div>
                </div>
                <div class="transaction-amount ${transaction.positive ? 'positive' : 'negative'}">
                    ${transaction.positive ? '+' : ''}${this.formatMoney(Math.abs(transaction.amount))}
                </div>
            `;
            
            container.appendChild(item);
        });
    }

    loadVisitHistory() {
        const container = document.getElementById('history-list');
        
        // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏–π
        const visits = [
            { id: 1, title: '–ß–µ–∫ ‚Ññ12345', amount: 8500, date: '2024-01-20', services: ['–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'] },
            { id: 2, title: '–ß–µ–∫ ‚Ññ12344', amount: 15300, date: '2024-01-15', services: ['–¢–û-15000', '–ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤'] },
            { id: 3, title: '–ß–µ–∫ ‚Ññ12343', amount: 3200, date: '2024-01-10', services: ['–†–∞–∑–≤–∞–ª-—Å—Ö–æ–∂–¥–µ–Ω–∏–µ'] }
        ];
        
        container.innerHTML = '';
        
        if (visits.length === 0) {
            container.innerHTML = '<p style="text-align: center; color: var(--tg-theme-hint-color);">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>';
            return;
        }
        
        visits.forEach(visit => {
            const item = document.createElement('div');
            item.className = 'history-item';
            
            item.innerHTML = `
                <div class="history-header">
                    <div class="history-title">${visit.title}</div>
                    <div class="history-amount">${this.formatMoney(visit.amount)}</div>
                </div>
                <div class="history-date">${this.formatDate(visit.date)}</div>
                <div style="margin-top: 8px; font-size: 14px; color: var(--tg-theme-hint-color);">
                    ${visit.services.join(', ')}
                </div>
            `;
            
            item.addEventListener('click', () => this.showVisitDetails(visit));
            container.appendChild(item);
        });
    }

    loadMaintenanceData() {
        const container = document.getElementById('maintenance-overview');
        
        // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¢–û
        const maintenanceItems = [
            { id: 1, title: 'üõ¢Ô∏è –ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞', subtitle: '–ö–∞–∂–¥—ã–µ 10,000 –∫–º', status: 'soon', lastKm: 48500, nextKm: 50000 },
            { id: 2, title: 'üîß –¢–û-15000', subtitle: '–ö–∞–∂–¥—ã–µ 15,000 –∫–º', status: 'ok', lastKm: 45000, nextKm: 60000 },
            { id: 3, title: 'üõû –ó–∞–º–µ–Ω–∞ –∫–æ–ª–æ–¥–æ–∫', subtitle: '–ü–æ –∏–∑–Ω–æ—Å—É', status: 'overdue', lastKm: 35000, nextKm: 45000 },
            { id: 4, title: '‚öôÔ∏è –†–∞–∑–≤–∞–ª-—Å—Ö–æ–∂–¥–µ–Ω–∏–µ', subtitle: '–ö–∞–∂–¥—ã–µ 20,000 –∫–º', status: 'never', lastKm: null, nextKm: null }
        ];
        
        container.innerHTML = '';
        
        maintenanceItems.forEach(item => {
            const element = document.createElement('div');
            element.className = 'maintenance-item';
            
            let statusText = '';
            switch (item.status) {
                case 'ok': statusText = '–í –ø–æ—Ä—è–¥–∫–µ'; break;
                case 'soon': statusText = '–°–∫–æ—Ä–æ'; break;
                case 'overdue': statusText = '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'; break;
                case 'never': statusText = '–ù–µ –¥–µ–ª–∞–ª–∏'; break;
            }
            
            element.innerHTML = `
                <div class="maintenance-info">
                    <div class="maintenance-title">${item.title}</div>
                    <div class="maintenance-subtitle">${item.subtitle}</div>
                </div>
                <div class="maintenance-status ${item.status}">${statusText}</div>
            `;
            
            container.appendChild(element);
        });
    }

    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const page = e.currentTarget.dataset.page;
                this.showPage(page);
            });
        });
        
        // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        document.getElementById('redeem-btn').addEventListener('click', () => this.showRedeemModal());
        document.getElementById('analytics-btn').addEventListener('click', () => this.showAnalytics());
        
        // –ú–æ–¥–∞–ª—ã
        document.getElementById('confirm-redeem').addEventListener('click', () => this.confirmRedeem());
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–û
        document.getElementById('add-maintenance-btn').addEventListener('click', () => this.showAddMaintenanceForm());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∞
        document.getElementById('modal-overlay').addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                this.closeModal();
            }
        });
    }

    showPage(pageName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.querySelectorAll('.page').forEach(page => {
            page.classList.remove('active');
        });
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.getElementById(`${pageName}-page`).classList.add('active');
        document.querySelector(`[data-page="${pageName}"]`).classList.add('active');
        
        this.currentPage = pageName;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        if (pageName === 'booking') {
            this.initBookingWizard();
        }
    }

    showMainApp() {
        document.getElementById('loading').style.display = 'none';
        document.getElementById('main-app').style.display = 'block';
    }

    showRedeemModal() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è
        const lastVisitAmount = 8500; // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        const maxRedeem = Math.min(this.userLoyaltyData.balance, lastVisitAmount * 0.3);
        
        document.getElementById('available-redeem').textContent = this.formatMoney(maxRedeem);
        document.getElementById('last-check-amount').textContent = this.formatMoney(lastVisitAmount);
        
        document.getElementById('modal-overlay').classList.add('show');
    }

    closeModal() {
        document.getElementById('modal-overlay').classList.remove('show');
    }

    async confirmRedeem() {
        const availableAmount = parseInt(document.getElementById('available-redeem').textContent.replace(/[^\d]/g, ''));
        
        if (availableAmount > 0) {
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
            this.showLoading('–°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤...');
            
            await this.sleep(1000);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            this.userLoyaltyData.balance -= availableAmount;
            this.userLoyaltyData.totalRedeemed += availableAmount;
            
            this.updateUserInterface();
            this.closeModal();
            
            this.tg.showAlert(`–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ ${this.formatMoney(availableAmount)} –±–æ–Ω—É—Å–æ–≤!`);
        }
    }

    showAnalytics() {
        this.tg.showAlert('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.');
    }

    showAddMaintenanceForm() {
        this.tg.showAlert('–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –æ –¢–û –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.');
    }

    initBookingWizard() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('booking-content').innerHTML = `
            <div style="text-align: center; padding: 40px 20px;">
                <div style="font-size: 48px; margin-bottom: 16px;">üìÖ</div>
                <h3 style="margin-bottom: 16px;">–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å</h3>
                <p style="color: var(--tg-theme-hint-color); margin-bottom: 24px;">
                    –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –º–∞—Å—Ç–µ—Ä–∞ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∏–∑–∏—Ç–∞
                </p>
                <button class="btn-primary" onclick="loyaltyApp.startBookingProcess()">
                    –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
                </button>
            </div>
        `;
    }

    startBookingProcess() {
        this.tg.showAlert('–°–∏—Å—Ç–µ–º–∞ –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.');
    }

    showVisitDetails(visit) {
        this.tg.showAlert(`–î–µ—Ç–∞–ª–∏ –≤–∏–∑–∏—Ç–∞:\n\n${visit.title}\n–°—É–º–º–∞: ${this.formatMoney(visit.amount)}\n–î–∞—Ç–∞: ${this.formatDate(visit.date)}\n–£—Å–ª—É–≥–∏: ${visit.services.join(', ')}`);
    }

    showLoading(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        console.log(message);
    }

    showError(message) {
        this.tg.showAlert(`–û—à–∏–±–∫–∞: ${message}`);
    }

    formatMoney(amount) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
function showPage(pageName) {
    window.loyaltyApp.showPage(pageName);
}

function closeModal() {
    window.loyaltyApp.closeModal();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.loyaltyApp = new LoyaltyApp();

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram WebApp
window.Telegram.WebApp.onEvent('viewportChanged', () => {
    console.log('Viewport changed');
});

window.Telegram.WebApp.onEvent('themeChanged', () => {
    window.loyaltyApp.applyTelegramTheme();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
window.Telegram.WebApp.BackButton.onClick(() => {
    if (window.loyaltyApp.currentPage !== 'dashboard') {
        window.loyaltyApp.showPage('dashboard');
    } else {
        window.Telegram.WebApp.close();
    }
});

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫–æ–≥–¥–∞ –Ω–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
document.addEventListener('DOMContentLoaded', () => {
    const observer = new MutationObserver(() => {
        if (window.loyaltyApp && window.loyaltyApp.currentPage !== 'dashboard') {
            window.Telegram.WebApp.BackButton.show();
        } else {
            window.Telegram.WebApp.BackButton.hide();
        }
    });
    
    observer.observe(document.body, { childList: true, subtree: true });
});
