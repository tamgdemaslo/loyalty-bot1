// Telegram Mini App - –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
class LoyaltyApp {
    constructor() {
        console.log('üì± Initializing LoyaltyApp...');
        console.log('üí≠ window.Telegram exists:', !!window.Telegram);
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è Telegram –æ–±—ä–µ–∫—Ç–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if (!window.Telegram) {
            console.log('‚ö†Ô∏è Creating stub Telegram WebApp object for development');
            window.Telegram = { 
                WebApp: { 
                    ready() { console.log('üìç Stub ready() called'); }, 
                    expand() { console.log('üìç Stub expand() called'); }, 
                    initData: '', 
                    initDataUnsafe: { user: { id: 12345, first_name: 'DevUser' } },
                    BackButton: { show() {}, hide() {}, onClick(cb) {} },
                    showAlert(text) { alert(text); }
                } 
            };
        }
        
        this.tg = window.Telegram.WebApp;
        this.userData = null;
        this.currentPage = 'dashboard';
        this.bookingData = {};
        
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        this.tg.ready();
        this.tg.expand();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        this.userData = this.tg.initDataUnsafe?.user;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.loadUserData();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        this.applyTelegramTheme();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        this.showMainApp();
    }

    applyTelegramTheme() {
        const root = document.documentElement;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã Telegram
        if (this.tg.themeParams) {
            const theme = this.tg.themeParams;
            
            if (theme.bg_color) root.style.setProperty('--tg-theme-bg-color', theme.bg_color);
            if (theme.text_color) root.style.setProperty('--tg-theme-text-color', theme.text_color);
            if (theme.hint_color) root.style.setProperty('--tg-theme-hint-color', theme.hint_color);
            if (theme.link_color) root.style.setProperty('--tg-theme-link-color', theme.link_color);
            if (theme.button_color) root.style.setProperty('--tg-theme-button-color', theme.button_color);
            if (theme.button_text_color) root.style.setProperty('--tg-theme-button-text-color', theme.button_text_color);
            if (theme.secondary_bg_color) root.style.setProperty('--tg-theme-secondary-bg-color', theme.secondary_bg_color);
        }
    }

    async loadUserData() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –Ω–æ –ø–æ —Å—É—Ç–∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        try {
            console.log('Checking authorization status...');
            
            const response = await fetch('/api/user', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    initData: this.tg.initData || '',
                    user: this.tg.initDataUnsafe?.user || null
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                console.log('Server requires phone auth:', errorData);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
                this.showPhoneAuthForm({
                    firstName: errorData?.firstName || this.userData?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                });
                return;
            }
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
            this.userLoyaltyData = await response.json();
            this.updateUserInterface();
            
        } catch (error) {
            console.error('Error loading user data:', error);
            
            // –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            this.showPhoneAuthForm({
                firstName: this.userData?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            });
        }
    }

    updateUserInterface() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        document.getElementById('user-name').textContent = this.userLoyaltyData.name;
        document.getElementById('user-status').textContent = `–°—Ç–∞—Ç—É—Å: ${this.userLoyaltyData.level}`;
        document.getElementById('balance-amount').textContent = this.formatMoney(this.userLoyaltyData.balance);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        this.updateLoyaltyCard();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        this.updateProfileData();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        this.loadRecentTransactions();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π
        this.loadVisitHistory();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¢–û
        this.loadMaintenanceData();
    }

    updateLoyaltyCard() {
        const levelBadge = document.getElementById('level-badge');
        const progressFill = document.getElementById('progress-fill');
        const currentSpent = document.getElementById('current-spent');
        const nextLevelReq = document.getElementById('next-level-requirement');
        
        levelBadge.textContent = this.userLoyaltyData.level;
        levelBadge.className = `level-badge ${this.userLoyaltyData.level}`;
        
        currentSpent.textContent = this.formatMoney(this.userLoyaltyData.totalSpent);
        
        const levels = {
            'Bronze': { next: 'Silver', requirement: 50000 },
            'Silver': { next: 'Gold', requirement: 150000 },
            'Gold': { next: 'Platinum', requirement: 300000 },
            'Platinum': { next: 'VIP', requirement: 500000 },
            'VIP': { next: null, requirement: null }
        };
        
        const currentLevel = levels[this.userLoyaltyData.level];
        if (currentLevel.next) {
            const progress = (this.userLoyaltyData.totalSpent / currentLevel.requirement) * 100;
            progressFill.style.width = `${Math.min(progress, 100)}%`;
            
            const remaining = currentLevel.requirement - this.userLoyaltyData.totalSpent;
            nextLevelReq.textContent = `–¥–æ ${currentLevel.next}: ${this.formatMoney(remaining)}`;
        } else {
            progressFill.style.width = '100%';
            nextLevelReq.textContent = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
        }
    }

    updateProfileData() {
        document.getElementById('profile-name').textContent = this.userLoyaltyData.name;
        document.getElementById('profile-phone').textContent = this.userLoyaltyData.phone;
        document.getElementById('profile-registered').textContent = this.formatDate(this.userLoyaltyData.registeredDate);
        
        document.getElementById('total-visits').textContent = this.userLoyaltyData.totalVisits;
        document.getElementById('total-spent').textContent = this.formatMoney(this.userLoyaltyData.totalSpent);
        document.getElementById('total-earned').textContent = this.formatMoney(this.userLoyaltyData.totalEarned);
        document.getElementById('total-redeemed').textContent = this.formatMoney(this.userLoyaltyData.totalRedeemed);
    }

    async loadRecentTransactions() {
        const container = document.getElementById('recent-transactions');
        
        try {
            const userId = this.userLoyaltyData?.id || this.userData?.id;
            if (!userId) {
                throw new Error('User ID not available');
            }
            
            const response = await fetch(`/api/transactions/${userId}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const transactions = await response.json();
            
            container.innerHTML = '';
            
            if (transactions.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: var(--tg-theme-hint-color);">–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</p>';
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
            const recentTransactions = transactions.slice(0, 3);
            
            recentTransactions.forEach(transaction => {
                const item = document.createElement('div');
                item.className = 'transaction-item';
                
                const isPositive = transaction.amount > 0;
                
                item.innerHTML = `
                    <div class="transaction-info">
                        <div class="transaction-type">${transaction.description}</div>
                        <div class="transaction-date">${this.formatDate(transaction.date)}</div>
                    </div>
                    <div class="transaction-amount ${isPositive ? 'positive' : 'negative'}">
                        ${isPositive ? '+' : ''}${this.formatMoney(Math.abs(transaction.amount))}
                    </div>
                `;
                
                container.appendChild(item);
            });
            
        } catch (error) {
            console.error('Error loading transactions:', error);
            
            // Fallback –∫ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º
            const transactions = [
                { type: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –≤–∏–∑–∏—Ç', amount: 450, date: '2024-01-20', positive: true },
                { type: '–°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤', amount: -320, date: '2024-01-18', positive: false },
                { type: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –≤–∏–∑–∏—Ç', amount: 680, date: '2024-01-15', positive: true }
            ];
            
            container.innerHTML = '';
            
            transactions.forEach(transaction => {
                const item = document.createElement('div');
                item.className = 'transaction-item';
                
                item.innerHTML = `
                    <div class="transaction-info">
                        <div class="transaction-type">${transaction.type}</div>
                        <div class="transaction-date">${this.formatDate(transaction.date)}</div>
                    </div>
                    <div class="transaction-amount ${transaction.positive ? 'positive' : 'negative'}">
                        ${transaction.positive ? '+' : ''}${this.formatMoney(Math.abs(transaction.amount))}
                    </div>
                `;
                
                container.appendChild(item);
            });
        }
    }

    async loadVisitHistory() {
        const container = document.getElementById('history-list');
        
        try {
            const userId = this.userLoyaltyData?.id || this.userData?.id;
            if (!userId) {
                throw new Error('User ID not available');
            }
            
            const response = await fetch(`/api/visits/${userId}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const visits = await response.json();
            
            container.innerHTML = '';
            
            if (visits.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: var(--tg-theme-hint-color);">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>';
                return;
            }
            
            visits.forEach(visit => {
                const item = document.createElement('div');
                item.className = 'history-item';
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏–∑ –º–∞—Å—Å–∏–≤–∞ services
                const servicesList = visit.services && visit.services.length > 0 
                    ? visit.services.map(s => s.name || s).join(', ')
                    : '–£—Å–ª—É–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
                
                item.innerHTML = `
                    <div class="history-header">
                        <div class="history-title">${visit.title}</div>
                        <div class="history-amount">${this.formatMoney(visit.amount)}</div>
                    </div>
                    <div class="history-date">${this.formatDate(visit.date)}</div>
                    <div style="margin-top: 8px; font-size: 14px; color: var(--tg-theme-hint-color);">
                        ${servicesList}
                    </div>
                    ${visit.bonusEarned ? `<div style="margin-top: 4px; font-size: 12px; color: #4CAF50;">+${this.formatMoney(visit.bonusEarned)} –±–æ–Ω—É—Å–æ–≤</div>` : ''}
                `;
                
                item.addEventListener('click', () => this.showVisitDetails(visit));
                container.appendChild(item);
            });
            
        } catch (error) {
            console.error('Error loading visit history:', error);
            
            // Fallback –∫ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º
            const visits = [
                { id: 1, title: '–ß–µ–∫ ‚Ññ12345', amount: 8500, date: '2024-01-20', services: ['–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'] },
                { id: 2, title: '–ß–µ–∫ ‚Ññ12344', amount: 15300, date: '2024-01-15', services: ['–¢–û-15000', '–ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤'] },
                { id: 3, title: '–ß–µ–∫ ‚Ññ12343', amount: 3200, date: '2024-01-10', services: ['–†–∞–∑–≤–∞–ª-—Å—Ö–æ–∂–¥–µ–Ω–∏–µ'] }
            ];
            
            container.innerHTML = '';
            
            visits.forEach(visit => {
                const item = document.createElement('div');
                item.className = 'history-item';
                
                item.innerHTML = `
                    <div class="history-header">
                        <div class="history-title">${visit.title}</div>
                        <div class="history-amount">${this.formatMoney(visit.amount)}</div>
                    </div>
                    <div class="history-date">${this.formatDate(visit.date)}</div>
                    <div style="margin-top: 8px; font-size: 14px; color: var(--tg-theme-hint-color);">
                        ${visit.services.join(', ')}
                    </div>
                `;
                
                item.addEventListener('click', () => this.showVisitDetails(visit));
                container.appendChild(item);
            });
        }
    }

    async loadMaintenanceData() {
        const container = document.getElementById('maintenance-overview');
        
        try {
            const userId = this.userLoyaltyData?.id || this.userData?.id;
            if (!userId) {
                throw new Error('User ID not available');
            }
            
            const response = await fetch(`/api/maintenance/${userId}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const maintenanceItems = await response.json();
            
            container.innerHTML = '';
            
            if (maintenanceItems.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: var(--tg-theme-hint-color);">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¢–û</p>';
                return;
            }
            
            maintenanceItems.forEach(item => {
                const element = document.createElement('div');
                element.className = 'maintenance-item';
                
                let statusText = '';
                switch (item.status) {
                    case 'ok': statusText = '–í –ø–æ—Ä—è–¥–∫–µ'; break;
                    case 'soon': statusText = '–°–∫–æ—Ä–æ'; break;
                    case 'overdue': statusText = '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'; break;
                    case 'never': statusText = '–ù–µ –¥–µ–ª–∞–ª–∏'; break;
                    default: statusText = item.status;
                }
                
                element.innerHTML = `
                    <div class="maintenance-info">
                        <div class="maintenance-title">${item.title}</div>
                        <div class="maintenance-subtitle">${item.subtitle}</div>
                        ${item.lastPerformed ? `<div style="font-size: 12px; color: var(--tg-theme-hint-color);">–ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${this.formatDate(item.lastPerformed)} (${item.lastMileage} –∫–º)</div>` : ''}
                    </div>
                    <div class="maintenance-status ${item.status}">${statusText}</div>
                `;
                
                container.appendChild(element);
            });
            
        } catch (error) {
            console.error('Error loading maintenance data:', error);
            
            // Fallback –∫ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º
            const maintenanceItems = [
                { id: 1, title: 'üõ¢Ô∏è –ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞', subtitle: '–ö–∞–∂–¥—ã–µ 10,000 –∫–º', status: 'soon', lastKm: 48500, nextKm: 50000 },
                { id: 2, title: 'üîß –¢–û-15000', subtitle: '–ö–∞–∂–¥—ã–µ 15,000 –∫–º', status: 'ok', lastKm: 45000, nextKm: 60000 },
                { id: 3, title: 'üõû –ó–∞–º–µ–Ω–∞ –∫–æ–ª–æ–¥–æ–∫', subtitle: '–ü–æ –∏–∑–Ω–æ—Å—É', status: 'overdue', lastKm: 35000, nextKm: 45000 },
                { id: 4, title: '‚öôÔ∏è –†–∞–∑–≤–∞–ª-—Å—Ö–æ–∂–¥–µ–Ω–∏–µ', subtitle: '–ö–∞–∂–¥—ã–µ 20,000 –∫–º', status: 'never', lastKm: null, nextKm: null }
            ];
            
            container.innerHTML = '';
            
            maintenanceItems.forEach(item => {
                const element = document.createElement('div');
                element.className = 'maintenance-item';
                
                let statusText = '';
                switch (item.status) {
                    case 'ok': statusText = '–í –ø–æ—Ä—è–¥–∫–µ'; break;
                    case 'soon': statusText = '–°–∫–æ—Ä–æ'; break;
                    case 'overdue': statusText = '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'; break;
                    case 'never': statusText = '–ù–µ –¥–µ–ª–∞–ª–∏'; break;
                }
                
                element.innerHTML = `
                    <div class="maintenance-info">
                        <div class="maintenance-title">${item.title}</div>
                        <div class="maintenance-subtitle">${item.subtitle}</div>
                    </div>
                    <div class="maintenance-status ${item.status}">${statusText}</div>
                `;
                
                container.appendChild(element);
            });
        }
    }

    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const page = e.currentTarget.dataset.page;
                this.showPage(page);
            });
        });
        
        // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        document.getElementById('redeem-btn').addEventListener('click', () => this.showRedeemModal());
        document.getElementById('analytics-btn').addEventListener('click', () => this.showAnalytics());
        
        // –ú–æ–¥–∞–ª—ã
        document.getElementById('confirm-redeem').addEventListener('click', () => this.confirmRedeem());
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–û
        document.getElementById('add-maintenance-btn').addEventListener('click', () => this.showAddMaintenanceForm());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∞
        document.getElementById('modal-overlay').addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                this.closeModal();
            }
        });
    }

    showPage(pageName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.querySelectorAll('.page').forEach(page => {
            page.classList.remove('active');
        });
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.getElementById(`${pageName}-page`).classList.add('active');
        document.querySelector(`[data-page="${pageName}"]`).classList.add('active');
        
        this.currentPage = pageName;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        if (pageName === 'booking') {
            this.initBookingWizard();
        }
    }

    showMainApp() {
        document.getElementById('loading').style.display = 'none';
        document.getElementById('main-app').style.display = 'block';
    }
    
    showAuthorizationPrompt() {
        document.getElementById('loading').style.display = 'none';
        document.getElementById('main-app').innerHTML = `
            <div style="padding: 40px 20px; text-align: center;">
                <div style="font-size: 64px; margin-bottom: 24px;">üîê</div>
                <h2 style="margin-bottom: 16px;">–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
                <p style="color: var(--tg-theme-hint-color); margin-bottom: 32px;">
                    –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.
                </p>
                <p style="color: var(--tg-theme-hint-color); margin-bottom: 24px;">
                    –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º @tgmclientbot –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, –ø–æ–¥–µ–ª–∏–≤—à–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
                </p>
                <button class="btn-primary" onclick="window.Telegram.WebApp.close()">
                    –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                </button>
            </div>
        `;
        document.getElementById('main-app').style.display = 'block';
    }
    
    showPhoneAuthForm(authData) {
        document.getElementById('loading').style.display = 'none';
        document.getElementById('main-app').innerHTML = `
            <div style="padding: 40px 20px; text-align: center;">
                <div style="font-size: 64px; margin-bottom: 24px;">üìû</div>
                <h2 style="margin-bottom: 16px;">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
                <p style="color: var(--tg-theme-hint-color); margin-bottom: 32px;">
                    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${authData?.firstName || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!<br>
                    –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
                </p>
                
                <div id="phone-auth-form" style="max-width: 300px; margin: 0 auto;">
                    <div style="margin-bottom: 24px; text-align: left;">
                        <label style="display: block; margin-bottom: 8px; font-weight: 500;">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
                        <div style="display: flex; align-items: center; border: 1px solid #ddd; border-radius: 8px; overflow: hidden;">
                            <span style="padding: 12px; background: #f0f0f0; border-right: 1px solid #ddd; font-weight: 500;">+7</span>
                            <input type="tel" id="user-phone-input" placeholder="999 255 60 31" 
                                   maxlength="13"
                                   style="flex: 1; padding: 12px; border: none; outline: none;">
                        </div>
                    </div>
                    
                    <button class="btn-primary" onclick="loyaltyApp.authorizeByPhone()" style="width: 100%; margin-bottom: 16px;">
                        –í–æ–π—Ç–∏
                    </button>
                    
                    <button class="btn-secondary" onclick="window.Telegram.WebApp.close()" style="width: 100%;">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
                
                <div id="auth-loading" style="display: none; padding: 20px;">
                    <div style="font-size: 24px; margin-bottom: 16px;">‚è≥</div>
                    <p>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</p>
                </div>
                
                <div style="margin-top: 32px; padding: 16px; background: var(--tg-theme-secondary-bg-color, #f0f0f0); border-radius: 8px; font-size: 14px; color: var(--tg-theme-hint-color);">
                    <strong>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong><br>
                    ‚Ä¢ –ï—Å–ª–∏ –≤—ã —É–∂–µ –∫–ª–∏–µ–Ω—Ç - –Ω–∞–π–¥–µ–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç<br>
                    ‚Ä¢ –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç - —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å<br>
                    ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –±–æ–Ω—É—Å–∞–º
                </div>
            </div>
        `;
        document.getElementById('main-app').style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        setTimeout(() => {
            const phoneInput = document.getElementById('user-phone-input');
            if (phoneInput) {
                phoneInput.addEventListener('input', (e) => {
                    let value = e.target.value.replace(/\D/g, '');
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ü–∏—Ñ—Ä
                    if (value.length > 10) value = value.slice(0, 10);
                    
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ XXX XXX XX XX
                    let formattedValue = '';
                    if (value.length > 0) {
                        formattedValue = value.slice(0, 3);
                        if (value.length > 3) {
                            formattedValue += ' ' + value.slice(3, 6);
                        }
                        if (value.length > 6) {
                            formattedValue += ' ' + value.slice(6, 8);
                        }
                        if (value.length > 8) {
                            formattedValue += ' ' + value.slice(8, 10);
                        }
                    }
                    
                    e.target.value = formattedValue;
                });
            }
        }, 100);
    }
    
    showRegistrationForm() {
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ showPhoneAuthForm
        this.showPhoneAuthForm({ firstName: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' });
    }
    
    async authorizeByPhone() {
        const phoneValue = document.getElementById('user-phone-input').value.trim();
        
        if (!phoneValue) {
            this.tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        const phoneDigits = phoneValue.replace(/\D/g, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 —Ü–∏—Ñ—Ä)
        if (phoneDigits.length !== 10) {
            this.tg.showAlert('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 999 255 60 31 (10 —Ü–∏—Ñ—Ä)');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å +7
        const fullPhone = '+7' + phoneDigits;
        
        try {
            document.getElementById('phone-auth-form').style.display = 'none';
            document.getElementById('auth-loading').style.display = 'block';
            
            const response = await fetch('/api/auth-phone', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    initData: this.tg.initData || '',
                    phone: fullPhone,
                    user: this.tg.initDataUnsafe?.user || null
                })
            });
            
            const result = await response.json();
            
            if (response.ok && result.success) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                this.userLoyaltyData = result.user;
                // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º userData –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                this.userData = this.tg.initDataUnsafe?.user || { id: result.user.id };
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const message = result.user.isNewUser 
                    ? `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\nüí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ 100 –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤!`
                    : `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${this.formatMoney(result.user.balance)}`;
                
                this.tg.showAlert(message);
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
                // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                document.getElementById('loading').style.display = 'none';
                document.getElementById('main-app').style.display = 'block';
                document.getElementById('main-app').innerHTML = `
                    <div class="navbar">
                        <div class="nav-btn active" data-page="dashboard" onclick="showPage('dashboard')">
                            <i class="fas fa-home"></i>
                            <span>–ì–ª–∞–≤–Ω–∞—è</span>
                        </div>
                        <div class="nav-btn" data-page="history" onclick="showPage('history')">
                            <i class="fas fa-history"></i>
                            <span>–ò—Å—Ç–æ—Ä–∏—è</span>
                        </div>
                        <div class="nav-btn" data-page="maintenance" onclick="showPage('maintenance')">
                            <i class="fas fa-tools"></i>
                            <span>–¢–û</span>
                        </div>
                        <div class="nav-btn" data-page="profile" onclick="showPage('profile')">
                            <i class="fas fa-user"></i>
                            <span>–ü—Ä–æ—Ñ–∏–ª—å</span>
                        </div>
                    </div>
                    
                    <div class="pages">
                        <div id="dashboard-page" class="page active">
                            <div class="header">
                                <div class="user-info">
                                    <div id="user-name">${this.userLoyaltyData.name}</div>
                                    <div id="user-status">–°—Ç–∞—Ç—É—Å: ${this.userLoyaltyData.level}</div>
                                </div>
                                <div class="balance">
                                    <div class="balance-label">–ë–æ–Ω—É—Å—ã</div>
                                    <div id="balance-amount">${this.formatMoney(this.userLoyaltyData.balance)}</div>
                                </div>
                            </div>
                            
                            <div class="loyalty-card">
                                <div class="card-header">
                                    <div id="level-badge" class="level-badge ${this.userLoyaltyData.level}">${this.userLoyaltyData.level}</div>
                                    <div class="card-title">–ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</div>
                                </div>
                                <div class="progress-container">
                                    <div id="progress-fill" class="progress-fill" style="width: 45%"></div>
                                </div>
                                <div class="loyalty-info">
                                    <div>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <span id="current-spent">${this.formatMoney(this.userLoyaltyData.totalSpent)}</span></div>
                                    <div>–û—Å—Ç–∞–ª–æ—Å—å <span id="next-level-requirement">–¥–æ Silver: ‚ÇΩ45,000</span></div>
                                </div>
                            </div>
                            
                            <div class="quick-actions">
                                <button class="action-btn" id="redeem-btn">
                                    <i class="fas fa-gift"></i> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã
                                </button>
                                <button class="action-btn" id="analytics-btn">
                                    <i class="fas fa-chart-line"></i> –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                                </button>
                            </div>
                            
                            <div class="section">
                                <div class="section-header">
                                    <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</h3>
                                    <a href="#" onclick="showPage('history')">–í—Å–µ</a>
                                </div>
                                <div id="recent-transactions" class="transactions-list">
                                    <div class="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                                </div>
                            </div>
                        </div>
                        
                        <div id="history-page" class="page">
                            <h2>–ò—Å—Ç–æ—Ä–∏—è –≤–∏–∑–∏—Ç–æ–≤</h2>
                            <div id="history-list" class="history-list">
                                <div class="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                            </div>
                        </div>
                        
                        <div id="maintenance-page" class="page">
                            <h2>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h2>
                            <div id="maintenance-overview" class="maintenance-overview">
                                <div class="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                            </div>
                            <button class="btn-primary" id="add-maintenance-btn">
                                <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –¢–û
                            </button>
                        </div>
                        
                        <div id="booking-page" class="page">
                            <h2>–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å</h2>
                            <div id="booking-content">
                                <div class="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                            </div>
                        </div>
                        
                        <div id="profile-page" class="page">
                            <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
                            <div class="profile-info">
                                <div class="profile-field">
                                    <label>–ò–º—è:</label>
                                    <div id="profile-name">${this.userLoyaltyData.name}</div>
                                </div>
                                <div class="profile-field">
                                    <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                                    <div id="profile-phone">${this.userLoyaltyData.phone}</div>
                                </div>
                                <div class="profile-field">
                                    <label>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</label>
                                    <div id="profile-registered">${this.formatDate(this.userLoyaltyData.registeredDate)}</div>
                                </div>
                            </div>
                            
                            <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                            <div class="stats-container">
                                <div class="stat-item">
                                    <div class="stat-value" id="total-visits">${this.userLoyaltyData.totalVisits}</div>
                                    <div class="stat-label">–í–∏–∑–∏—Ç–æ–≤</div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-value" id="total-spent">${this.formatMoney(this.userLoyaltyData.totalSpent)}</div>
                                    <div class="stat-label">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-value" id="total-earned">${this.formatMoney(this.userLoyaltyData.totalEarned)}</div>
                                    <div class="stat-label">–ù–∞—á–∏—Å–ª–µ–Ω–æ</div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-value" id="total-redeemed">${this.formatMoney(this.userLoyaltyData.totalRedeemed)}</div>
                                    <div class="stat-label">–°–ø–∏—Å–∞–Ω–æ</div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                this.setupEventListeners();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                setTimeout(() => {
                    this.updateLoyaltyCard();
                    this.loadRecentTransactions();
                    this.loadVisitHistory();
                    this.loadMaintenanceData();
                }, 500);
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }
            
        } catch (error) {
            console.error('Authorization error:', error);
            document.getElementById('phone-auth-form').style.display = 'block';
            document.getElementById('auth-loading').style.display = 'none';
            this.tg.showAlert(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
    }
    
    async registerUser() {
        // –ú–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        this.tg.showAlert('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    }

    showRedeemModal() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è
        const lastVisitAmount = 8500; // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        const maxRedeem = Math.min(this.userLoyaltyData.balance, lastVisitAmount * 0.3);
        
        document.getElementById('available-redeem').textContent = this.formatMoney(maxRedeem);
        document.getElementById('last-check-amount').textContent = this.formatMoney(lastVisitAmount);
        
        document.getElementById('modal-overlay').classList.add('show');
    }

    closeModal() {
        document.getElementById('modal-overlay').classList.remove('show');
    }

    async confirmRedeem() {
        const availableAmount = parseInt(document.getElementById('available-redeem').textContent.replace(/[^\d]/g, ''));
        
        if (availableAmount > 0) {
            try {
                this.showLoading('–°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤...');
                
                const response = await fetch('/api/redeem', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: this.userLoyaltyData?.id || this.userData?.id,
                        amount: availableAmount,
                        description: `–°–ø–∏—Å–∞–Ω–∏–µ ${availableAmount} –±–æ–Ω—É—Å–æ–≤ —á–µ—Ä–µ–∑ Mini App`
                    })
                });
                
                const result = await response.json();
                
                if (response.ok && result.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    this.userLoyaltyData.balance = result.newBalance;
                    this.userLoyaltyData.totalRedeemed += availableAmount;
                    
                    this.updateUserInterface();
                    this.closeModal();
                    
                    this.tg.showAlert(result.message || `–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ ${this.formatMoney(availableAmount)} –±–æ–Ω—É—Å–æ–≤!`);
                } else {
                    throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤');
                }
                
            } catch (error) {
                console.error('Error redeeming bonuses:', error);
                this.tg.showAlert(`–û—à–∏–±–∫–∞: ${error.message}`);
            }
        }
    }

    showAnalytics() {
        this.tg.showAlert('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.');
    }

    showAddMaintenanceForm() {
        this.tg.showAlert('–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –æ –¢–û –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.');
    }

    initBookingWizard() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('booking-content').innerHTML = `
            <div style="text-align: center; padding: 40px 20px;">
                <div style="font-size: 48px; margin-bottom: 16px;">üìÖ</div>
                <h3 style="margin-bottom: 16px;">–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å</h3>
                <p style="color: var(--tg-theme-hint-color); margin-bottom: 24px;">
                    –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –º–∞—Å—Ç–µ—Ä–∞ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∏–∑–∏—Ç–∞
                </p>
                <button class="btn-primary" onclick="loyaltyApp.startBookingProcess()">
                    –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
                </button>
            </div>
        `;
    }

    startBookingProcess() {
        this.tg.showAlert('–°–∏—Å—Ç–µ–º–∞ –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.');
    }

    showVisitDetails(visit) {
        this.tg.showAlert(`–î–µ—Ç–∞–ª–∏ –≤–∏–∑–∏—Ç–∞:\n\n${visit.title}\n–°—É–º–º–∞: ${this.formatMoney(visit.amount)}\n–î–∞—Ç–∞: ${this.formatDate(visit.date)}\n–£—Å–ª—É–≥–∏: ${visit.services.join(', ')}`);
    }

    showLoading(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        console.log(message);
    }

    showError(message) {
        this.tg.showAlert(`–û—à–∏–±–∫–∞: ${message}`);
    }

    formatMoney(amount) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
function showPage(pageName) {
    window.loyaltyApp.showPage(pageName);
}

function closeModal() {
    window.loyaltyApp.closeModal();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.loyaltyApp = new LoyaltyApp();

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram WebApp
window.Telegram.WebApp.onEvent('viewportChanged', () => {
    console.log('Viewport changed');
});

window.Telegram.WebApp.onEvent('themeChanged', () => {
    window.loyaltyApp.applyTelegramTheme();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
window.Telegram.WebApp.BackButton.onClick(() => {
    if (window.loyaltyApp.currentPage !== 'dashboard') {
        window.loyaltyApp.showPage('dashboard');
    } else {
        window.Telegram.WebApp.close();
    }
});

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫–æ–≥–¥–∞ –Ω–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
document.addEventListener('DOMContentLoaded', () => {
    const observer = new MutationObserver(() => {
        if (window.loyaltyApp && window.loyaltyApp.currentPage !== 'dashboard') {
            window.Telegram.WebApp.BackButton.show();
        } else {
            window.Telegram.WebApp.BackButton.hide();
        }
    });
    
    observer.observe(document.body, { childList: true, subtree: true });
});
