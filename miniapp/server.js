require('dotenv').config();
const express = require('express');
const path = require('path');
const cors = require('cors');
const crypto = require('crypto');
const LoyaltyAPI = require('./api_integration');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
const loyaltyAPI = new LoyaltyAPI();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Telegram Bot Token –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const BOT_TOKEN = process.env.BOT_TOKEN;

if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram WebApp
function validateTelegramWebAppData(initData) {
    try {
        const urlParams = new URLSearchParams(initData);
        const hash = urlParams.get('hash');
        urlParams.delete('hash');
        
        const dataCheckString = Array.from(urlParams.entries())
            .sort(([a], [b]) => a.localeCompare(b))
            .map(([key, value]) => `${key}=${value}`)
            .join('\n');
        
        const secretKey = crypto
            .createHmac('sha256', 'WebAppData')
            .update(BOT_TOKEN)
            .digest();
        
        const calculatedHash = crypto
            .createHmac('sha256', secretKey)
            .update(dataCheckString)
            .digest('hex');
        
        return calculatedHash === hash;
    } catch (error) {
        console.error('Validation error:', error);
        return false;
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Mini App
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user', async (req, res) => {
    const { initData, user: directUser } = req.body;
    
    console.log('Received request:', { initData, directUser });
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    // if (!validateTelegramWebAppData(initData)) {
    //     return res.status(401).json({ error: 'Unauthorized' });
    // }
    
    try {
        let user = null;
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä—è–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if (directUser && directUser.id) {
            user = directUser;
            console.log('Using direct user data:', user);
        } else if (initData) {
            // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
            const urlParams = new URLSearchParams(initData);
            const userParam = urlParams.get('user');
            
            if (userParam) {
                try {
                    user = JSON.parse(decodeURIComponent(userParam));
                    console.log('Parsed user from initData:', user);
                } catch (error) {
                    console.error('Error parsing user data from initData:', error);
                }
            }
        }
        
        if (!user || !user.id) {
            console.error('No user ID found in request');
            return res.status(400).json({ 
                error: 'User ID not found',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram',
                requiresAuthorization: true,
                debug: {
                    hasInitData: !!initData,
                    hasDirectUser: !!directUser,
                    initDataLength: initData ? initData.length : 0
                }
            });
        }
        
        const loyaltyAPI = new LoyaltyAPI();
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∞–≥–µ–Ω—Ç–∞ –ø–æ Telegram ID
        const agentId = await loyaltyAPI.getAgentId(user.id);
        if (!agentId) {
            console.log(`User ${user.id} not registered in bot, requiring bot authorization`);
            return res.status(404).json({ 
                error: 'User not registered',
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ',
                requiresBotAuth: true,
                telegramId: user.id,
                username: user.username || null
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [balance, loyaltyLevel, contact, statistics] = await Promise.all([
            loyaltyAPI.getBalance(agentId),
            loyaltyAPI.getLoyaltyLevel(agentId),
            loyaltyAPI.getUserContact(user.id),
            loyaltyAPI.getClientStatistics(agentId)
        ]);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        const levelNames = ['', 'Bronze', 'Silver', 'Gold', 'Platinum', 'Diamond'];
        const levelName = levelNames[loyaltyLevel.level_id] || 'Bronze';
        
        const userData = {
            id: user.id,
            name: contact.fullname || user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            phone: contact.phone || '–ù–µ —É–∫–∞–∑–∞–Ω',
            balance: Math.round(balance / 100), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
            level: levelName,
            levelId: loyaltyLevel.level_id,
            totalSpent: Math.round(loyaltyLevel.total_spent / 100),
            totalEarned: Math.round(loyaltyLevel.total_earned / 100),
            totalRedeemed: Math.round(loyaltyLevel.total_redeemed / 100),
            totalVisits: statistics.totalVisits,
            thisYearVisits: statistics.thisYearVisits,
            averageCheck: Math.round(statistics.averageCheck / 100),
            registeredDate: new Date().toISOString().split('T')[0]
        };
        
        res.json(userData);
    } catch (error) {
        console.error('Error getting user data:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π
app.get('/api/visits/:userId', async (req, res) => {
    const { userId } = req.params;
    
    try {
        const loyaltyAPI = new LoyaltyAPI();
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∞–≥–µ–Ω—Ç–∞ –ø–æ Telegram ID
        const agentId = await loyaltyAPI.getAgentId(parseInt(userId));
        if (!agentId) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏—è
        const visits = await loyaltyAPI.getRecentVisits(agentId, 50);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        const formattedVisits = visits.map(visit => ({
            id: visit.id,
            title: `–ß–µ–∫ ‚Ññ${visit.name}`,
            amount: Math.round(visit.sum / 100), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
            date: visit.moment.split('T')[0],
            services: visit.services || [],
            car: visit.car || {},
            bonusEarned: Math.round(visit.bonusEarned / 100)
        }));
        
        res.json(formattedVisits);
    } catch (error) {
        console.error('Error getting visits:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
app.get('/api/transactions/:userId', async (req, res) => {
    const { userId } = req.params;
    
    try {
        const loyaltyAPI = new LoyaltyAPI();
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∞–≥–µ–Ω—Ç–∞ –ø–æ Telegram ID
        const agentId = await loyaltyAPI.getAgentId(parseInt(userId));
        if (!agentId) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transactions = await loyaltyAPI.getTransactions(agentId, 50);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        const formattedTransactions = transactions.map((transaction, index) => ({
            id: index + 1,
            type: transaction.transaction_type,
            description: transaction.description,
            amount: Math.round(transaction.amount / 100), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
            date: transaction.created_at.split(' ')[0], // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
            visitId: transaction.related_demand_id
        }));
        
        res.json(formattedTransactions);
    } catch (error) {
        console.error('Error getting transactions:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
app.get('/api/maintenance/:userId', async (req, res) => {
    const { userId } = req.params;
    
    try {
        const loyaltyAPI = new LoyaltyAPI();
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∞–≥–µ–Ω—Ç–∞ –ø–æ Telegram ID
        const agentId = await loyaltyAPI.getAgentId(parseInt(userId));
        if (!agentId) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¢–û
        const maintenanceHistory = await loyaltyAPI.getMaintenanceData(agentId);
        
        // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –≤–∏–¥–æ–≤ –¢–û
        const maintenanceWorks = {
            'oil_change': {
                title: 'üõ¢Ô∏è –ó–∞–º–µ–Ω–∞ –º–æ—Ç–æ—Ä–Ω–æ–≥–æ –º–∞—Å–ª–∞',
                subtitle: '–ö–∞–∂–¥—ã–µ 10,000 –∫–º –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤',
                interval: 10000
            },
            'air_filter': {
                title: 'üå¨Ô∏è –ó–∞–º–µ–Ω–∞ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞',
                subtitle: '–ö–∞–∂–¥—ã–µ 15,000 –∫–º –∏–ª–∏ 18 –º–µ—Å—è—Ü–µ–≤',
                interval: 15000
            },
            'brake_check': {
                title: 'üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–º–æ–∑–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
                subtitle: '–ö–∞–∂–¥—ã–µ 20,000 –∫–º –∏–ª–∏ 24 –º–µ—Å—è—Ü–∞',
                interval: 20000
            },
            'battery_check': {
                title: 'üîã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞',
                subtitle: '–ö–∞–∂–¥—ã–µ 30,000 –∫–º –∏–ª–∏ 36 –º–µ—Å—è—Ü–µ–≤',
                interval: 30000
            }
        };
        
        const maintenanceData = Object.keys(maintenanceWorks).map((workId, index) => {
            const work = maintenanceWorks[workId];
            const lastRecord = maintenanceHistory.find(record => record.work_id === workId);
            
            let status = 'ok';
            const currentMileage = 45000; // –≠—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
            if (lastRecord) {
                const nextDue = lastRecord.mileage + work.interval;
                if (currentMileage >= nextDue) {
                    status = 'overdue';
                } else if (currentMileage >= nextDue - 2000) {
                    status = 'soon';
                }
            } else {
                status = 'soon'; // –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å
            }
            
            return {
                id: index + 1,
                title: work.title,
                subtitle: work.subtitle,
                status,
                lastPerformed: lastRecord ? lastRecord.performed_date : null,
                lastMileage: lastRecord ? lastRecord.mileage : null,
                nextDue: lastRecord ? lastRecord.mileage + work.interval : currentMileage + work.interval,
                currentMileage,
                intervalKm: work.interval,
                intervalMonths: 12
            };
        });
        
        res.json(maintenanceData);
    } catch (error) {
        console.error('Error getting maintenance data:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
app.post('/api/redeem', async (req, res) => {
    const { userId, amount, description } = req.body;
    
    try {
        const loyaltyAPI = new LoyaltyAPI();
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∞–≥–µ–Ω—Ç–∞ –ø–æ Telegram ID
        const agentId = await loyaltyAPI.getAgentId(parseInt(userId));
        if (!agentId) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        const currentBalance = await loyaltyAPI.getBalance(agentId);
        const amountInKopecks = amount * 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
        
        if (currentBalance < amountInKopecks) {
            return res.status(400).json({ 
                error: 'Insufficient balance',
                message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è'
            });
        }
        
        // –°–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞)
        await loyaltyAPI.addBonusTransaction(
            agentId, 
            'redemption', 
            -amountInKopecks, 
            description || `–°–ø–∏—Å–∞–Ω–∏–µ ${amount} –±–æ–Ω—É—Å–æ–≤ —á–µ—Ä–µ–∑ Mini App`
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ API
        await loyaltyAPI.updateBalance(agentId, -amountInKopecks);
        
        const newBalance = await loyaltyAPI.getBalance(agentId);
        
        res.json({
            success: true,
            message: `–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ ${amount} –±–æ–Ω—É—Å–æ–≤`,
            newBalance: Math.round(newBalance / 100),
            transactionId: Date.now()
        });
    } catch (error) {
        console.error('Error redeeming bonuses:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/register', async (req, res) => {
    const { initData, phone, name } = req.body;
    
    try {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const urlParams = new URLSearchParams(initData);
        const userParam = urlParams.get('user');
        let user = null;
        
        if (userParam) {
            try {
                user = JSON.parse(decodeURIComponent(userParam));
            } catch (error) {
                console.error('Error parsing user data:', error);
                return res.status(400).json({ error: 'Invalid user data' });
            }
        }
        
        if (!user || !user.id) {
            return res.status(400).json({ error: 'User ID not found' });
        }
        
        const loyaltyAPI = new LoyaltyAPI();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingAgentId = await loyaltyAPI.getAgentId(user.id);
        if (existingAgentId) {
            return res.status(409).json({ 
                error: 'User already registered',
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
            });
        }
        
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ú–æ–π–°–∫–ª–∞–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        let agentId = await loyaltyAPI.findAgentByPhone(phone);
        
        if (!agentId) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥
            agentId = await loyaltyAPI.createNewAgent(name, phone);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É Telegram ID –∏ Agent ID
        await loyaltyAPI.registerUserMapping(user.id, agentId, phone, name);
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
        await loyaltyAPI.addBonusTransaction(
            agentId,
            'accrual',
            10000, // 100 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Mini App'
        );
        
        res.json({
            success: true,
            message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!',
            agentId: agentId,
            bonusAwarded: 100
        });
        
    } catch (error) {
        console.error('Error during registration:', error);
        res.status(500).json({ 
            error: 'Registration failed',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/check-registration', async (req, res) => {
    const { initData, phone } = req.body;
    
    try {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const urlParams = new URLSearchParams(initData);
        const userParam = urlParams.get('user');
        let user = null;
        
        if (userParam) {
            try {
                user = JSON.parse(decodeURIComponent(userParam));
            } catch (error) {
                console.error('Error parsing user data:', error);
                return res.status(400).json({ error: 'Invalid user data' });
            }
        }
        
        if (!user || !user.id) {
            return res.status(400).json({ error: 'User ID not found' });
        }
        
        const loyaltyAPI = new LoyaltyAPI();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
        const agentId = await loyaltyAPI.getAgentId(user.id);
        
        if (agentId) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            const [balance, loyaltyLevel, contact] = await Promise.all([
                loyaltyAPI.getBalance(agentId),
                loyaltyAPI.getLoyaltyLevel(agentId),
                loyaltyAPI.getUserContact(user.id)
            ]);
            
            const levelNames = ['', 'Bronze', 'Silver', 'Gold', 'Platinum', 'Diamond'];
            const levelName = levelNames[loyaltyLevel.level_id] || 'Bronze';
            
            return res.json({
                isRegistered: true,
                user: {
                    id: user.id,
                    name: contact.fullname || user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    phone: contact.phone,
                    balance: Math.round(balance / 100),
                    level: levelName
                }
            });
        }
        
        // –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ú–æ–π–°–∫–ª–∞–¥
        let foundInMoySklad = false;
        if (phone) {
            const existingAgentId = await loyaltyAPI.findAgentByPhone(phone);
            foundInMoySklad = !!existingAgentId;
        }
        
        res.json({
            isRegistered: false,
            foundInMoySklad: foundInMoySklad,
            canRegister: true
        });
        
    } catch (error) {
        console.error('Error checking registration:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
app.post('/api/booking', (req, res) => {
    const { userId, serviceId, staffId, datetime } = req.body;
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YCLIENTS
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
    setTimeout(() => {
        res.json({
            success: true,
            message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
            bookingId: Date.now(),
            datetime: datetime
        });
    }, 1500);
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –¢–û
app.post('/api/maintenance', (req, res) => {
    const { userId, workId, date, mileage, notes } = req.body;
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    res.json({
        success: true,
        message: '–ó–∞–ø–∏—Å—å –æ –¢–û —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
        recordId: Date.now()
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –¥–ª—è –∑–∞–ø–∏—Å–∏
app.get('/api/services', (req, res) => {
    const services = [
        { id: 1, title: '–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞', duration: 60, price: 3500 },
        { id: 2, title: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è', duration: 90, price: 2500 },
        { id: 3, title: '–¢–û-15000', duration: 180, price: 8500 },
        { id: 4, title: '–†–∞–∑–≤–∞–ª-—Å—Ö–æ–∂–¥–µ–Ω–∏–µ', duration: 120, price: 3200 },
        { id: 5, title: '–ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫', duration: 150, price: 6500 }
    ];
    
    res.json(services);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤
app.get('/api/staff/:serviceId', (req, res) => {
    const staff = [
        { id: 1, name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á', specialization: '–î–≤–∏–≥–∞—Ç–µ–ª—å' },
        { id: 2, name: '–°–µ—Ä–≥–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á', specialization: '–•–æ–¥–æ–≤–∞—è —á–∞—Å—Ç—å' },
        { id: 3, name: '–ê–ª–µ–∫—Å–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á', specialization: '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞' }
    ];
    
    res.json(staff);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
app.get('/api/slots/:staffId/:date', (req, res) => {
    const { staffId, date } = req.params;
    
    // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    const slots = [
        { time: '09:00', datetime: `${date}T09:00:00` },
        { time: '10:30', datetime: `${date}T10:30:00` },
        { time: '14:00', datetime: `${date}T14:00:00` },
        { time: '15:30', datetime: `${date}T15:30:00` },
        { time: '17:00', datetime: `${date}T17:00:00` }
    ];
    
    res.json(slots);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.use((req, res) => {
    res.status(404).json({ error: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä Telegram Mini App –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:${PORT}`);
    console.log(`üîó –î–ª—è Telegram WebApp –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://your-domain.com`);
    console.log(`üåç NODE_ENV: ${process.env.NODE_ENV}`);
    console.log(`üîë BOT_TOKEN –Ω–∞–π–¥–µ–Ω: ${BOT_TOKEN ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: ${loyaltyAPI.db ? '–î–∞' : '–ù–µ—Ç'}`);
});
