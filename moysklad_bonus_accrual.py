#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
–ù–∞—á–∏—Å–ª—è–µ—Ç 200 —Ä—É–±–ª–µ–π (20000 –∫–æ–ø–µ–µ–∫) –∫–∞–∂–¥–æ–º—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
"""

import sys
import os
import logging
import csv
from datetime import datetime
from typing import List, Dict, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from bot.moysklad import _get
    from bot.db import change_balance, add_bonus_transaction
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('moysklad_bonus_accrual.log'),
        logging.StreamHandler()
    ]
)
log = logging.getLogger(__name__)


def get_all_agents(limit_per_page: int = 1000) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    Args:
        limit_per_page: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–º–∞–∫—Å 1000)
    
    Returns:
        List[Dict]: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    """
    log.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥...")
    agents = []
    offset = 0
    
    while True:
        try:
            response = _get("entity/counterparty", params={
                "offset": offset, 
                "limit": limit_per_page,
                "order": "name,asc"
            })
            
            rows = response.get('rows', [])
            if not rows:
                break
                
            agents.extend(rows)
            offset += len(rows)
            
            log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(agents)} –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤...")
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if len(rows) < limit_per_page:
                break
                
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ (offset={offset}): {e}")
            break
    
    log.info(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
    return agents


def display_agents_preview(agents: List[Dict], max_display: int = 10):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    """
    print("\n" + "="*100)
    print("–°–ü–ò–°–û–ö –ö–û–ù–¢–†–ê–ì–ï–ù–¢–û–í –ò–ó –ú–û–ô–°–ö–õ–ê–î:")
    print("="*100)
    print(f"{'‚Ññ':<3} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<50} {'ID':<40}")
    print("-"*100)
    
    for i, agent in enumerate(agents[:max_display], 1):
        name = agent.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:49]
        agent_id = agent.get('id', '–ë–µ–∑ ID')
        print(f"{i:<3} {name:<50} {agent_id}")
    
    if len(agents) > max_display:
        print(f"... –∏ –µ—â–µ {len(agents) - max_display} –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
    
    print("-"*100)
    print(f"–í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
    print("="*100)


def bulk_accrue_bonuses(agents: List[Dict], amount: int = 20000) -> Tuple[int, int]:
    """
    –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
    
    Args:
        agents: —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
        amount: —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20000 = 200 —Ä—É–±)
    
    Returns:
        Tuple[int, int]: (—É—Å–ø–µ—à–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, –Ω–µ—É–¥–∞—á–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è)
    """
    log.info("–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤...")
    
    if not agents:
        log.warning("–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
        return 0, 0

    successful_accruals = 0
    failed_accruals = 0
    description = f"–ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∏–∑ –ú–æ–π–°klad {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    print(f"\n–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ {amount/100:.2f} —Ä—É–± –∫–∞–∂–¥–æ–º—É –∏–∑ {len(agents)} –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤...")
    
    for i, agent in enumerate(agents, 1):
        agent_id = agent.get('id')
        name = agent.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        if not agent_id:
            log.error(f"–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –±–µ–∑ ID: {agent}")
            failed_accruals += 1
            continue
        
        print(f"[{i}/{len(agents)}] {name[:50]}...", end="")
        
        try:
            change_balance(agent_id, amount)
            add_bonus_transaction(agent_id, "accrual", amount, description)
            print(f" ‚úì (+{amount/100:.2f} —Ä—É–±)")
            log.info(f"–£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount/100:.2f} —Ä—É–± –¥–ª—è {name} ({agent_id})")
            successful_accruals += 1
        except Exception as e:
            print(f" ‚úó –û–®–ò–ë–ö–ê: {e}")
            log.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è {name} ({agent_id}): {e}")
            failed_accruals += 1
    
    return successful_accruals, failed_accruals


def export_agents_to_csv(agents: List[Dict]) -> str:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –≤ CSV —Ñ–∞–π–ª
    
    Args:
        agents: —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    
    Returns:
        str: –∏–º—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    filename = f"moysklad_agents_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', 'Email', '–¢–µ–ª–µ—Ñ–æ–Ω', '–¢–∏–ø'])
        
        # –î–∞–Ω–Ω—ã–µ
        for agent in agents:
            writer.writerow([
                agent.get('id', ''),
                agent.get('name', ''),
                agent.get('description', ''),
                agent.get('email', ''),
                agent.get('phone', ''),
                agent.get('companyType', '')
            ])
    
    log.info(f"–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}")
    return filename


def print_final_report(total_agents: int, successful: int, failed: int, amount: int):
    """
    –í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    """
    print("\n" + "="*80)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –ë–û–ù–£–°–û–í")
    print("="*80)
    print(f"–í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –≤ –ú–æ–π–°–∫–ª–∞–¥: {total_agents}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: {successful}")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: {failed}")
    print(f"–°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–≥–æ: {amount/100:.2f} —Ä—É–±")
    print(f"–û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: {successful * amount/100:.2f} —Ä—É–±")
    print(f"–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    print("="*80)
    
    log.info(f"–ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {successful}, –û—à–∏–±–æ–∫: {failed}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üè™ –°–∫—Ä–∏–ø—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º –∏–∑ –ú–æ–π–°–∫–ª–∞–¥")
    print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
        agents = get_all_agents()
        
        if not agents:
            print("‚ùå –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ú–æ–π–°–∫–ª–∞–¥")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        display_agents_preview(agents)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\nüí∞ –ë—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ 200.00 —Ä—É–±–ª–µ–π –∫–∞–∂–¥–æ–º—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É")
        print(f"üí∏ –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: {len(agents) * 200:.2f} —Ä—É–±–ª–µ–π")
        
        choice = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ? (y/N): ").strip().lower()
        
        if choice != 'y':
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
            export_choice = input("üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –≤ CSV? (y/N): ").strip().lower()
            if export_choice == 'y':
                filename = export_agents_to_csv(agents)
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
        successful, failed = bulk_accrue_bonuses(agents, 20000)  # 200 —Ä—É–±–ª–µ–π
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print_final_report(len(agents), successful, failed, 20000)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        filename = export_agents_to_csv(agents)
        print(f"\nüíæ –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–µ moysklad_bonus_accrual.log")


if __name__ == "__main__":
    main()
